{"ast":null,"code":"import { __decorate } from \"tslib\";\nlet WebGLService = class WebGLService {\n  constructor() {}\n\n  get gl() {\n    return this._renderingContext;\n  }\n\n  initialiseWebGLContext(canvas) {\n    // Try to grab the standard context. If it fails, fallback to experimental.\n    this._renderingContext = canvas.getContext('webgl') || canvas.getContext('experimental-webgl'); // If we don't have a GL context, give up now... only continue if WebGL is available and working...\n\n    if (!this.gl) {\n      alert('Unable to initialize WebGL. Your browser may not support it.');\n      return;\n    }\n\n    this.setWebGLCanvasDimensions(canvas);\n    this.initialiseWebGLCanvas();\n  }\n\n  setWebGLCanvasDimensions(canvas) {\n    // set width and height based on canvas width and height - good practice to use clientWidth and clientHeight\n    this.gl.canvas.width = canvas.clientWidth;\n    this.gl.canvas.height = canvas.clientHeight;\n  }\n\n  initialiseWebGLCanvas() {\n    // Set clear colour to black, fully opaque\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0); // Enable depth testing\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Near things obscure far things\n\n    this.gl.depthFunc(this.gl.LEQUAL); // Clear the colour as well as the depth buffer.\n\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n  }\n\n};\nWebGLService = __decorate([Injectabl({\n  providedIn: 'root'\n})], WebGLService);\nexport { WebGLService };","map":null,"metadata":{},"sourceType":"module"}