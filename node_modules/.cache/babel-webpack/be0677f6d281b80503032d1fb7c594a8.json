{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport fragmentShaderSolid from '../../assets/shaders/fragment-shader-solid.glsl';\nimport vertexShaderSolid from '../../assets/shaders/vertex-shader-solid.glsl';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"bg\"];\nexport let MindblowingComponent = /*#__PURE__*/(() => {\n  class MindblowingComponent {\n    constructor() {\n      this.renderer = new THREE.WebGLRenderer();\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\n      this.camera.position.z = 100;\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.addObject();\n      this.setupResize();\n      this.resize();\n    }\n\n    ngOnInit() {\n      this.stars = () => {\n        this.sphere = new THREE.SphereGeometry(0.25, 24, 24);\n        const material = new THREE.MeshStandardMaterial({\n          color: 0xffffff\n        });\n        const star = new THREE.Mesh(this.sphere, material);\n        const [x, y, z] = Array(3).fill(3).map(() => THREE.MathUtils.randFloatSpread(100));\n        star.position.set(x, y, z);\n        this.scene.add(star);\n      };\n\n      this.onLoadPage();\n    }\n\n    ngAfterViewInit() {\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.bg.nativeElement.appendChild(this.renderer.domElement);\n      this.animate();\n    }\n\n    resize() {\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n    }\n\n    setupResize() {\n      window.addEventListener('resize', this.resize.bind(this));\n    }\n\n    addObject() {\n      this.geometry = new THREE.TorusGeometry(10, 3, 16, 100);\n      this.material = new THREE.MeshNormalMaterial(); // light doesn't work, should put it on vertex-shader\n\n      this.pointLight = new THREE.PointLight(0xffffff);\n      this.ambientLight = new THREE.AmbientLight(0xffffff);\n      this.scene.add(this.pointLight, this.ambientLight);\n      this.lightHelper = new THREE.PointLightHelper(this.pointLight);\n      this.gridHelper = new THREE.GridHelper(200, 50);\n      this.scene.add(this.lightHelper, this.gridHelper);\n      this.material = new THREE.ShaderMaterial({\n        uniforms: {\n          time: {\n            value: 0\n          }\n        },\n        side: THREE.DoubleSide,\n        fragmentShader: fragmentShaderSolid,\n        vertexShader: vertexShaderSolid,\n        wireframe: true\n      });\n      this.mesh = new THREE.Mesh(this.geometry, this.material);\n      this.scene.add(this.mesh, this.pointLight);\n    }\n\n    onLoadPage() {\n      Array(200).fill(150).forEach(this.stars);\n      const texture = new THREE.TextureLoader().load('../assets/images/black-blue-sky.jpeg');\n      this.scene.background = texture; // header cube\n\n      const header = new THREE.TextureLoader().load('../assets/images/header1.jpg');\n      const img = new THREE.Mesh(new THREE.BoxGeometry(3, 3, 3), new THREE.MeshBasicMaterial({\n        map: header\n      })); // moon sphere\n\n      const moonImg = new THREE.TextureLoader().load('../assets/images/moon.jpg');\n      const normalTexture = new THREE.TextureLoader().load('../assets/images/normal.jpg');\n      const moon = new THREE.Mesh(new THREE.SphereGeometry(3, 32, 32), new THREE.MeshStandardMaterial({\n        map: moonImg,\n        normalMap: normalTexture\n      }));\n      moon.rotation.x += 0.01;\n      moon.rotation.y += 0.02;\n      moon.rotation.z += 0.01; // moon.position.setX(-10);\n\n      this.scene.add(moon);\n      this.moveCamera(moon, header);\n    } // doesn't work\n\n\n    moveCamera(moon, header) {\n      const t = document.body.getBoundingClientRect().top;\n      moon.position.z += 0.05;\n      moon.position.y += 0.075;\n      moon.position.x += 0.05;\n      header.rotation.y += 0.01;\n      header.rotation.z += 0.01;\n      this.camera.position.z = t * -0.1;\n      this.camera.position.x = t * -0.0002;\n      this.camera.position.y = t * -0.0002;\n    }\n\n    animate() {\n      window.requestAnimationFrame(() => this.animate());\n      this.mesh.rotation.x += 0.01;\n      this.mesh.rotation.y += 0.02;\n      this.mesh.rotation.z += 0.01;\n      this.renderer.render(this.scene, this.camera); // document.body.onscroll = this.moveCamera(item, item);\n    }\n\n  }\n\n  MindblowingComponent.ɵfac = function MindblowingComponent_Factory(t) {\n    return new (t || MindblowingComponent)();\n  };\n\n  MindblowingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MindblowingComponent,\n    selectors: [[\"app-mindblowing\"]],\n    viewQuery: function MindblowingComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bg = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"bg\", 1, \"bg\"], [\"bg\", \"\"]],\n    template: function MindblowingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    styles: [\"body[_ngcontent-%COMP%]{overflow-x:hidden;margin:0;font-family:monospace;color:#fff}#bg[_ngcontent-%COMP%]{position:fixed;top:0;left:0}main[_ngcontent-%COMP%]{width:100vw;height:200vw;z-index:99;position:absolute;justify-content:center;text-align:center;pointer-events:none;font-size:5vh}section[_ngcontent-%COMP%]{min-height:100vh;padding:20px;font-size:4vh}#scrollProgress[_ngcontent-%COMP%]{position:fixed;bottom:10px;left:10px;z-index:99;font-size:3vh}\"]\n  });\n  return MindblowingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}