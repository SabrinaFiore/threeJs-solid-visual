import { EventEmitter } from '@angular/core';
import { Object3D } from 'three';
import { ThreeColor, ThreeEuler, ThreeEvent, ThreeQuaternion, ThreeVector3, UnknownRecord } from '../typings';
import { Controller } from './controller.abstract';
import * as i0 from "@angular/core";
export declare class Object3dControllerDirective extends Controller {
    name?: string;
    position?: ThreeVector3;
    rotation?: ThreeEuler;
    quaternion?: ThreeQuaternion;
    scale?: ThreeVector3;
    color?: ThreeColor;
    userData?: UnknownRecord;
    dispose?: () => void;
    castShadow: boolean;
    receiveShadow: boolean;
    visible: boolean;
    matrixAutoUpdate: boolean;
    appendMode: 'immediate' | 'root';
    appendTo?: Object3D;
    click: EventEmitter<ThreeEvent<MouseEvent>>;
    contextmenu: EventEmitter<ThreeEvent<MouseEvent>>;
    dblclick: EventEmitter<ThreeEvent<MouseEvent>>;
    pointerup: EventEmitter<ThreeEvent<PointerEvent>>;
    pointerdown: EventEmitter<ThreeEvent<PointerEvent>>;
    pointerover: EventEmitter<ThreeEvent<PointerEvent>>;
    pointerout: EventEmitter<ThreeEvent<PointerEvent>>;
    pointerenter: EventEmitter<ThreeEvent<PointerEvent>>;
    pointerleave: EventEmitter<ThreeEvent<PointerEvent>>;
    pointermove: EventEmitter<ThreeEvent<PointerEvent>>;
    pointermissed: EventEmitter<ThreeEvent<PointerEvent>>;
    pointercancel: EventEmitter<ThreeEvent<PointerEvent>>;
    wheel: EventEmitter<ThreeEvent<WheelEvent>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<Object3dControllerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<Object3dControllerDirective, "    ngt-primitive[o3d],    ngt-mesh[o3d],    ngt-instanced-mesh[o3d],    ngt-skinned-mesh[o3d],    ngt-bone[o3d],    ngt-group[o3d],    ngt-lod[o3d],    ngt-scene[o3d],    ngt-points[o3d],    ngt-cube-camera[o3d],    ngt-contact-shadows[o3d],    ngt-html[o3d],    ngt-light-probe[o3d],    ngt-ambient-light[o3d],    ngt-ambient-light-probe[o3d],    ngt-hemisphere-light[o3d],    ngt-hemisphere-light-probe[o3d],    ngt-directional-light[o3d],    ngt-point-light[o3d],    ngt-spot-light[o3d],    ngt-rect-area-light[o3d],    ngt-arrow-helper[o3d],    ngt-axes-helper[o3d],    ngt-box-helper[o3d],    ngt-box3-helper[o3d],    ngt-grid-helper[o3d],    ngt-camera-helper[o3d],    ngt-directional-light-helper[o3d],    ngt-hemisphere-light-helper[o3d],    ngt-plane-helper[o3d],    ngt-point-light-helper[o3d],    ngt-polar-grid-helper[o3d],    ngt-skeleton-helper[o3d],    ngt-spot-light-helper[o3d],    ngt-line[o3d],    ngt-line-loop[o3d],    ngt-line-segments[o3d],    ngt-sprite[o3d],    ngt-camera[o3d],    ngt-perspective-camera[o3d],    ngt-orthographic-camera[o3d],    ngt-array-camera[o3d],    ngt-stereo-camera[o3d]  ", ["ngtObject3dController"], { "name": "name"; "position": "position"; "rotation": "rotation"; "quaternion": "quaternion"; "scale": "scale"; "color": "color"; "userData": "userData"; "dispose": "dispose"; "castShadow": "castShadow"; "receiveShadow": "receiveShadow"; "visible": "visible"; "matrixAutoUpdate": "matrixAutoUpdate"; "appendMode": "appendMode"; "appendTo": "appendTo"; }, { "click": "click"; "contextmenu": "contextmenu"; "dblclick": "dblclick"; "pointerup": "pointerup"; "pointerdown": "pointerdown"; "pointerover": "pointerover"; "pointerout": "pointerout"; "pointerenter": "pointerenter"; "pointerleave": "pointerleave"; "pointermove": "pointermove"; "pointermissed": "pointermissed"; "pointercancel": "pointercancel"; "wheel": "wheel"; }, never>;
}
