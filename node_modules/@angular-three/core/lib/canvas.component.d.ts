import { ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';
import type { Scene, WebGLRenderer, WebGLShadowMap } from 'three';
import { DestroyedService, LoopService } from './services';
import { AnimationStore, CanvasStore, EventsStore } from './stores';
import type { CameraOptions, RaycasterOptions, SceneOptions, ThreeCameraAlias } from './typings';
import * as i0 from "@angular/core";
export declare class CanvasComponent implements OnInit {
    private readonly canvasStore;
    private readonly animationStore;
    private readonly eventsStore;
    private readonly loopService;
    private readonly ngZone;
    private readonly hostElement;
    private readonly document;
    private readonly destroyed;
    hostClass: boolean;
    set orthographic(v: boolean);
    set linear(v: boolean);
    set shadows(v: boolean | Partial<WebGLShadowMap>);
    camera?: CameraOptions;
    scene?: SceneOptions;
    raycaster?: RaycasterOptions;
    created: EventEmitter<{
        gl: WebGLRenderer;
        camera: ThreeCameraAlias;
        scene: Scene;
    }>;
    rendererCanvas: ElementRef<HTMLCanvasElement>;
    constructor(canvasStore: CanvasStore, animationStore: AnimationStore, eventsStore: EventsStore, loopService: LoopService, ngZone: NgZone, hostElement: ElementRef<HTMLElement>, document: Document, destroyed: DestroyedService);
    ngOnInit(): void;
    private initWindowResizeListener;
    private initActiveListener;
    static ɵfac: i0.ɵɵFactoryDeclaration<CanvasComponent, [{ self: true; }, { self: true; }, { self: true; }, { self: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CanvasComponent, "ngt-canvas", ["ngtCanvas"], { "orthographic": "orthographic"; "linear": "linear"; "shadows": "shadows"; "camera": "camera"; "scene": "scene"; "raycaster": "raycaster"; }, { "created": "created"; }, never, never>;
}
