import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { Camera, OrthographicCamera, Scene, WebGLRenderer, WebGLShadowMap } from 'three';
import type { CameraOptions, CanvasInternal, CanvasStoreState, RaycasterOptions, SceneOptions, Size, ThreeCameraAlias, ThreeRaycaster } from '../typings';
import { ImperativeComponentStore } from './imperative-component-store.abstract';
import * as i0 from "@angular/core";
interface WindowResizeEffectParams {
    size: Size;
    dpr: number;
}
export declare const isOrthographicCamera: (def: Camera) => def is OrthographicCamera;
export declare class CanvasStore extends ImperativeComponentStore<CanvasStoreState> implements OnDestroy {
    readonly renderer$: Observable<WebGLRenderer | undefined>;
    readonly camera$: Observable<ThreeCameraAlias | undefined>;
    readonly scene$: Observable<Scene | undefined>;
    readonly raycaster$: Observable<ThreeRaycaster | undefined>;
    readonly isOrthographic$: Observable<boolean>;
    readonly isLinear$: Observable<boolean>;
    readonly shadows$: Observable<boolean | Partial<WebGLShadowMap>>;
    readonly active$: Observable<boolean>;
    readonly canvasInternal$: Observable<CanvasInternal>;
    constructor();
    readonly setIsOrthographic: (observableOrValue: boolean | Observable<boolean>) => import("rxjs").Subscription;
    readonly setIsLinear: (observableOrValue: boolean | Observable<boolean>) => import("rxjs").Subscription;
    readonly setShadows: (observableOrValue: boolean | Partial<WebGLShadowMap> | Observable<boolean | Partial<WebGLShadowMap>>) => import("rxjs").Subscription;
    readonly setSize: (observableOrValue: Size | Observable<Size>) => import("rxjs").Subscription;
    readonly setDpr: (observableOrValue: number | Observable<number>) => import("rxjs").Subscription;
    readonly setViewport: () => void;
    readonly setActive: (observableOrValue: boolean | Observable<boolean>) => import("rxjs").Subscription;
    readonly initRendererEffect: (observableOrValue: HTMLCanvasElement | Observable<HTMLCanvasElement>) => import("rxjs").Subscription;
    readonly initSceneEffect: (observableOrValue: SceneOptions | Observable<SceneOptions | undefined> | undefined) => import("rxjs").Subscription;
    readonly initCameraEffect: (observableOrValue: CameraOptions | Observable<CameraOptions | undefined> | undefined) => import("rxjs").Subscription;
    readonly initRaycasterEffect: (observableOrValue: RaycasterOptions | Observable<RaycasterOptions | undefined> | undefined) => import("rxjs").Subscription;
    readonly windowResizeEffect: (observableOrValue: WindowResizeEffectParams | Observable<WindowResizeEffectParams>) => import("rxjs").Subscription;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CanvasStore, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CanvasStore>;
}
export {};
