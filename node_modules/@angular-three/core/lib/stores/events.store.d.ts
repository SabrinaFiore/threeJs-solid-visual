import { OnDestroy } from '@angular/core';
import type { EventsStoreState } from '../typings';
import { CanvasStore } from './canvas.store';
import { ImperativeComponentStore } from './imperative-component-store.abstract';
import { InstancesStore } from './instances.store';
import * as i0 from "@angular/core";
export declare class EventsStore extends ImperativeComponentStore<EventsStoreState> implements OnDestroy {
    private readonly canvasStore;
    private readonly instancesStore;
    constructor(canvasStore: CanvasStore, instancesStore: InstancesStore);
    readonly initHandlersEffect: () => void;
    readonly connectEffect: (observableOrValue: HTMLElement | import("rxjs").Observable<HTMLElement>) => import("rxjs").Subscription;
    readonly disconnectEffect: () => void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EventsStore, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<EventsStore>;
}
