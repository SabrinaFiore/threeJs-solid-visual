import type { BufferGeometry, Material } from 'three';
import type { InstancesStoreState, ThreeInstance } from '../typings';
import { ImperativeComponentStore } from './imperative-component-store.abstract';
import * as i0 from "@angular/core";
export declare class InstancesStore extends ImperativeComponentStore<InstancesStoreState> {
    constructor();
    readonly saveMaterial: (observableOrValue: {
        material: Material;
        id?: string | undefined;
    } | import("rxjs").Observable<{
        material: Material;
        id?: string | undefined;
    }>) => import("rxjs").Subscription;
    readonly removeMaterial: (observableOrValue: string | import("rxjs").Observable<string>) => import("rxjs").Subscription;
    readonly saveBufferGeometry: (observableOrValue: {
        bufferGeometry: BufferGeometry;
        id?: string | undefined;
    } | import("rxjs").Observable<{
        bufferGeometry: BufferGeometry;
        id?: string | undefined;
    }>) => import("rxjs").Subscription;
    readonly removeBufferGeometry: (observableOrValue: string | import("rxjs").Observable<string>) => import("rxjs").Subscription;
    readonly saveObject: (observableOrValue: ThreeInstance | import("rxjs").Observable<ThreeInstance>) => import("rxjs").Subscription;
    readonly removeObject: (observableOrValue: string | import("rxjs").Observable<string>) => import("rxjs").Subscription;
    static ɵfac: i0.ɵɵFactoryDeclaration<InstancesStore, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<InstancesStore>;
}
