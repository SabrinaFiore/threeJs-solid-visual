import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import type { Object3D } from 'three';
import type { AnimationCallback, AnimationStoreState } from '../typings';
import { ImperativeComponentStore } from './imperative-component-store.abstract';
import * as i0 from "@angular/core";
export declare class AnimationStore extends ImperativeComponentStore<AnimationStoreState> implements OnDestroy {
    constructor();
    readonly animationsChangedEffect: (observableOrValue: Record<string, import("../typings").AnimationRecord | import("../typings").AnimationRecordNoObject> | Observable<Record<string, import("../typings").AnimationRecord | import("../typings").AnimationRecordNoObject>>) => import("rxjs").Subscription;
    readonly unregisterAnimationEffect: (observableOrValue: string | Observable<string>) => import("rxjs").Subscription;
    readonly clearEffect: () => void;
    registerAnimation<TObject3d extends Object3D = Object3D>(obj: TObject3d, callback: AnimationCallback<TObject3d>, priority?: number): () => void;
    registerAnimation<TObject3d extends Object3D = Object3D>(obs: Observable<TObject3d | null>, callback: AnimationCallback<TObject3d>, priority?: number): () => void;
    registerAnimation(callback: AnimationCallback, priority?: number): () => void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AnimationStore, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AnimationStore>;
}
