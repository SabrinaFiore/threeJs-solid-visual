import type { Color, Euler, Layers, Matrix4, Quaternion, Vector2, Vector3, Vector4 } from 'three';
export declare type NonFunctionKeys<T> = {
    [K in keyof T]: T[K] extends Function ? never : K;
}[keyof T];
export declare type Overwrite<T, O> = Omit<T, NonFunctionKeys<O>> & O;
export declare type ThreeEuler = Euler | Parameters<Euler['set']>;
export declare type ThreeMatrix4 = Matrix4 | Parameters<Matrix4['set']>;
export declare type ThreeVector2 = Vector2 | Parameters<Vector2['set']> | Parameters<Vector2['setScalar']>[0];
export declare type ThreeVector3 = Vector3 | Parameters<Vector3['set']> | Parameters<Vector3['setScalar']>[0];
export declare type ThreeVector4 = Vector4 | Parameters<Vector4['set']> | Parameters<Vector4['setScalar']>[0];
export declare type ThreeColor = ConstructorParameters<typeof Color> | Color | number | string;
export declare type ThreeColorArray = typeof Color | Parameters<Color['set']>;
export declare type ThreeLayers = Layers | Parameters<Layers['set']>[0];
export declare type ThreeQuaternion = Quaternion | Parameters<Quaternion['set']>;
export interface ThreeCommonParameters {
    position?: ThreeVector3;
    up?: ThreeVector3;
    scale?: ThreeVector3;
    rotation?: ThreeEuler;
    matrix?: ThreeMatrix4;
    quaternion?: ThreeQuaternion;
    layers?: ThreeLayers;
    background?: ThreeColor;
    dispose?: (() => void) | null;
}
