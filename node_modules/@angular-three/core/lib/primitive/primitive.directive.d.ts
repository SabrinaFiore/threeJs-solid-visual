import { EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { Object3D } from 'three';
import { AnimationLoopParticipant, ThreeObject3d } from '../abstracts';
import { Object3dControllerDirective } from '../controllers';
import { AnimationStore, CanvasStore } from '../stores';
import * as i0 from "@angular/core";
export declare class PrimitiveDirective<TObject = unknown> extends AnimationLoopParticipant<TObject> implements OnInit, OnDestroy {
    readonly animationStore: AnimationStore;
    readonly ngZone: NgZone;
    private readonly object3dController;
    private readonly canvasStore;
    protected readonly parentObjectDirective?: ThreeObject3d<Object3D<import("three").Event>> | undefined;
    ready: EventEmitter<TObject>;
    get object(): TObject;
    set object(value: TObject);
    private _object;
    constructor(animationStore: AnimationStore, ngZone: NgZone, object3dController: Object3dControllerDirective, canvasStore: CanvasStore, parentObjectDirective?: ThreeObject3d<Object3D<import("three").Event>> | undefined);
    get object3d(): TObject;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private appendToParent;
    protected remove(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrimitiveDirective<any>, [null, null, null, null, { optional: true; skipSelf: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PrimitiveDirective<any>, "ngt-primitive", ["ngtPrimitive"], { "object": "object"; }, { "ready": "ready"; }, never>;
}
