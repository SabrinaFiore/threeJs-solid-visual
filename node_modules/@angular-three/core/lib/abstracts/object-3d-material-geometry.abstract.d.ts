import { AfterContentInit } from '@angular/core';
import { BufferGeometry, Material, Object3D } from 'three';
import { AnyConstructor } from '../typings';
import { ThreeObject3d } from './object-3d.abstract';
import * as i0 from "@angular/core";
export declare abstract class ThreeObject3dMaterialGeometry<TObject extends Object3D = Object3D> extends ThreeObject3d<TObject> implements AfterContentInit {
    abstract get objectType(): AnyConstructor<TObject>;
    geometry?: string | BufferGeometry | null;
    material?: string | string[] | Material | Material[] | null;
    morphTargetInfluences?: number[];
    morphTargetDictionary?: {
        [key: string]: number;
    };
    private _objectMaterialGeometry;
    private _extraArgs?;
    set extraArgs(v: unknown[]);
    ngAfterContentInit(): void;
    protected initObject(): void;
    protected customize?: () => void;
    protected canCreate(): boolean;
    get object3d(): TObject;
    private getMaterial;
    private getGeometry;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThreeObject3dMaterialGeometry<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThreeObject3dMaterialGeometry<any>, never, never, { "geometry": "geometry"; "material": "material"; "morphTargetInfluences": "morphTargetInfluences"; "morphTargetDictionary": "morphTargetDictionary"; }, {}, never>;
}
