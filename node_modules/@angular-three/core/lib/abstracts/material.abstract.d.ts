import { NgZone, OnDestroy, OnInit } from '@angular/core';
import { Material, MaterialParameters } from 'three';
import { CanvasStore, InstancesStore } from '../stores';
import type { AnyConstructor } from '../typings';
import * as i0 from "@angular/core";
export declare abstract class ThreeMaterial<TMaterial extends Material = Material, TMaterialParameters extends MaterialParameters = MaterialParameters> implements OnInit, OnDestroy {
    protected readonly ngZone: NgZone;
    protected readonly instancesStore: InstancesStore;
    protected readonly canvasStore: CanvasStore;
    ngtId?: string;
    set parameters(v: TMaterialParameters | undefined);
    get parameters(): TMaterialParameters | undefined;
    private _parameters?;
    constructor(ngZone: NgZone, instancesStore: InstancesStore, canvasStore: CanvasStore);
    abstract materialType: AnyConstructor<TMaterial>;
    ngOnInit(): void;
    private _material;
    get material(): TMaterial;
    private convertColorToLinear;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThreeMaterial<any, any>, [null, { skipSelf: true; }, { skipSelf: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThreeMaterial<any, any>, never, never, { "ngtId": "ngtId"; "parameters": "parameters"; }, {}, never>;
}
