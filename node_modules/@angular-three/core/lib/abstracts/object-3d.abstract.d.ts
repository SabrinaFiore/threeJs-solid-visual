import { NgZone, OnChanges, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import type { Object3D } from 'three';
import { Object3dControllerDirective } from '../controllers';
import { AnimationStore, CanvasStore, EventsStore, InstancesStore } from '../stores';
import { AnimationLoopParticipant } from './animation-loop-participant.abstract';
import * as i0 from "@angular/core";
export declare abstract class ThreeObject3d<TObject extends Object3D = Object3D> extends AnimationLoopParticipant<TObject> implements OnDestroy, OnChanges {
    protected readonly object3dController: Object3dControllerDirective;
    protected readonly canvasStore: CanvasStore;
    protected readonly instancesStore: InstancesStore;
    protected readonly eventsStore: EventsStore;
    readonly animationStore: AnimationStore;
    readonly ngZone: NgZone;
    protected readonly parentObjectDirective?: ThreeObject3d<Object3D<import("three").Event>> | undefined;
    private $object3d;
    get object3d$(): Observable<TObject | null>;
    ready: Observable<TObject>;
    private changesSubscription?;
    constructor(object3dController: Object3dControllerDirective, canvasStore: CanvasStore, instancesStore: InstancesStore, eventsStore: EventsStore, animationStore: AnimationStore, ngZone: NgZone, parentObjectDirective?: ThreeObject3d<Object3D<import("three").Event>> | undefined);
    ngOnChanges(): void;
    protected init(): void;
    protected addToScene(): void;
    protected addToParent(): void;
    protected remove(): void;
    protected objectReady(): void;
    protected inputChangeHandler?: () => void;
    private applyCustomProps;
    private applyEvents;
    private appendToParent;
    ngOnDestroy(): void;
    protected abstract initObject(): void;
    abstract get object3d(): TObject;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThreeObject3d<any>, [null, null, null, null, null, null, { optional: true; skipSelf: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThreeObject3d<any>, never, never, {}, { "ready": "ready"; }, never>;
}
