import { NgZone, OnChanges, OnDestroy, OnInit } from '@angular/core';
import type { BuiltinShaderAttributeName } from 'three';
import { BufferAttribute } from 'three';
import type { AnyConstructor } from '../typings';
import { ThreeBufferGeometry } from './geometry.abstract';
import * as i0 from "@angular/core";
export declare abstract class ThreeAttribute<TAttribute extends BufferAttribute = BufferAttribute> implements OnInit, OnChanges, OnDestroy {
    protected readonly ngZone: NgZone;
    protected readonly geometryDirective?: ThreeBufferGeometry<import("three").BufferGeometry> | undefined;
    attach?: BuiltinShaderAttributeName;
    abstract attributeType: AnyConstructor<TAttribute>;
    constructor(ngZone: NgZone, geometryDirective?: ThreeBufferGeometry<import("three").BufferGeometry> | undefined);
    private _extraArgs;
    protected set extraArgs(v: unknown[]);
    private _attribute?;
    ngOnChanges(): void;
    ngOnInit(): void;
    private init;
    ngOnDestroy(): void;
    get attribute(): TAttribute | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThreeAttribute<any>, [null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThreeAttribute<any>, never, never, { "attach": "attach"; }, {}, never>;
}
