import { NgZone, OnInit } from '@angular/core';
import { Curve, Vector } from 'three';
import type { AnyConstructor } from '../typings';
import { ThreeBufferGeometry } from './geometry.abstract';
import * as i0 from "@angular/core";
export declare abstract class ThreeCurve<TCurve extends Curve<Vector> = Curve<Vector>> implements OnInit {
    private readonly ngZone;
    private readonly geometryDirective?;
    divisions?: number;
    abstract curveType: AnyConstructor<TCurve>;
    private _extraArgs;
    protected set extraArgs(v: unknown[]);
    constructor(ngZone: NgZone, geometryDirective?: ThreeBufferGeometry<import("three").BufferGeometry> | undefined);
    private _curve?;
    ngOnInit(): void;
    private init;
    get curve(): TCurve | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThreeCurve<any>, [null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThreeCurve<any>, never, never, { "divisions": "divisions"; }, {}, never>;
}
