import { ThreeObject3d } from '@angular-three/core';
import { Directive, EventEmitter, Input, Optional, Output, SkipSelf, } from '@angular/core';
import { AudioListenerDirective } from '../audio-listener';
import * as i0 from "@angular/core";
import * as i1 from "../audio-listener";
import * as i2 from "@angular-three/core";
export class ThreeAudio {
    constructor(listenerDirective, parentObjectDirective) {
        this.listenerDirective = listenerDirective;
        this.parentObjectDirective = parentObjectDirective;
        this.ready = new EventEmitter();
    }
    ngOnInit() {
        if (!this.listenerDirective) {
            console.error('AudioListener must exist to initialize Audio');
            return;
        }
        this._audio = new this.audioType(this.listenerDirective.audioListener);
        if (this.audio) {
            if (this.object3d) {
                this.object3d.add(this.audio);
            }
            else if (this.parentObjectDirective) {
                this.parentObjectDirective.object3d.add(this.audio);
            }
        }
        this.ready.emit(this.audio);
    }
    get audio() {
        return this._audio;
    }
}
ThreeAudio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudio, deps: [{ token: i1.AudioListenerDirective, optional: true, skipSelf: true }, { token: i2.ThreeObject3d, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
ThreeAudio.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: ThreeAudio, inputs: { object3d: "object3d" }, outputs: { ready: "ready" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudio, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.AudioListenerDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i2.ThreeObject3d, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { object3d: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });
//# sourceMappingURL=audio.abstract.js.map