{"version":3,"file":"audio.abstract.js","sourceRoot":"","sources":["../../../../../../../packages/core/audios/src/lib/abstracts/audio.abstract.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpE,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,QAAQ,EACR,MAAM,EACN,QAAQ,GACT,MAAM,eAAe,CAAC;AAGvB,OAAO,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;;;;AAG3D,MAAM,OAAgB,UAAU;IAS9B,YAGmB,iBAA0C,EAGxC,qBAAqC;QAHvC,sBAAiB,GAAjB,iBAAiB,CAAyB;QAGxC,0BAAqB,GAArB,qBAAqB,CAAgB;QARhD,UAAK,GAAG,IAAI,YAAY,EAAU,CAAC;IAS1C,CAAC;IAMJ,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,OAAO,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;YAC9D,OAAO;SACR;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAEvE,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC/B;iBAAM,IAAI,IAAI,CAAC,qBAAqB,EAAE;gBACrC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACrD;SACF;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;;wGA3CmB,UAAU;4FAAV,UAAU;4FAAV,UAAU;kBAD/B,SAAS;;0BAWL,QAAQ;;0BACR,QAAQ;;0BAER,QAAQ;;0BACR,QAAQ;4CATF,QAAQ;sBAAhB,KAAK;gBAEI,KAAK;sBAAd,MAAM","sourcesContent":["import { AnyConstructor, ThreeObject3d } from '@angular-three/core';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  SkipSelf,\n} from '@angular/core';\nimport type { Object3D } from 'three';\nimport { Audio } from 'three';\nimport { AudioListenerDirective } from '../audio-listener';\n\n@Directive()\nexport abstract class ThreeAudio<\n  TAudioNode extends AudioNode = GainNode,\n  TAudio extends Audio<TAudioNode> = Audio<TAudioNode>\n> implements OnInit\n{\n  @Input() object3d?: Object3D;\n\n  @Output() ready = new EventEmitter<TAudio>();\n\n  constructor(\n    @Optional()\n    @SkipSelf()\n    private readonly listenerDirective?: AudioListenerDirective,\n    @Optional()\n    @SkipSelf()\n    protected readonly parentObjectDirective?: ThreeObject3d\n  ) {}\n\n  abstract audioType: AnyConstructor<TAudio>;\n\n  private _audio?: TAudio;\n\n  ngOnInit() {\n    if (!this.listenerDirective) {\n      console.error('AudioListener must exist to initialize Audio');\n      return;\n    }\n\n    this._audio = new this.audioType(this.listenerDirective.audioListener);\n\n    if (this.audio) {\n      if (this.object3d) {\n        this.object3d.add(this.audio);\n      } else if (this.parentObjectDirective) {\n        this.parentObjectDirective.object3d.add(this.audio);\n      }\n    }\n\n    this.ready.emit(this.audio);\n  }\n\n  get audio(): TAudio | undefined {\n    return this._audio;\n  }\n}\n"]}