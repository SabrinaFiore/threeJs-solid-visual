import { ThreeObject3d } from '@angular-three/core';
import { ContentChildren, Directive, EventEmitter, Input, NgZone, Optional, Output, SkipSelf, } from '@angular/core';
import { Matrix4, Skeleton } from 'three';
import { BoneDirective } from './bone.directive';
import { SkinnedMeshDirective } from './skinned-mesh.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class SkeletonDirective {
    constructor(ngZone, hostObject) {
        this.ngZone = ngZone;
        this.hostObject = hostObject;
        this.ready = new EventEmitter();
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.bones) {
                const boneInverses = this.boneInverses
                    ? this.boneInverses.map((threeMaxtrix) => {
                        if (threeMaxtrix instanceof Matrix4)
                            return threeMaxtrix;
                        return new Matrix4().set(...threeMaxtrix);
                    })
                    : undefined;
                this._skeleton = new Skeleton(this.bones.map((b) => b.object3d), boneInverses);
                this.ready.emit(this.skeleton);
                if (this.hostObject) {
                    if (this.hostObject instanceof SkinnedMeshDirective) {
                        const bindMatrix = this.hostObject.bindMatrix
                            ? this.hostObject.bindMatrix instanceof Matrix4
                                ? this.hostObject.bindMatrix
                                : new Matrix4().set(...this.hostObject.bindMatrix)
                            : undefined;
                        this.hostObject.object3d.bind(this._skeleton, bindMatrix);
                    }
                }
            }
        });
    }
    get skeleton() {
        return this._skeleton;
    }
}
SkeletonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: SkeletonDirective, deps: [{ token: i0.NgZone }, { token: i1.ThreeObject3d, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
SkeletonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: SkeletonDirective, selector: "ngt-skeleton", inputs: { boneInverses: "boneInverses" }, outputs: { ready: "ready" }, queries: [{ propertyName: "bones", predicate: BoneDirective }], exportAs: ["ngtSkeleton"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: SkeletonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-skeleton',
                    exportAs: 'ngtSkeleton',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.ThreeObject3d, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { boneInverses: [{
                type: Input
            }], ready: [{
                type: Output
            }], bones: [{
                type: ContentChildren,
                args: [BoneDirective]
            }] } });
//# sourceMappingURL=skeleton.directive.js.map