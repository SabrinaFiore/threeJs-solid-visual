import { ThreeBufferGeometry } from '@angular-three/core';
import { Directive, Input, NgZone, Optional, } from '@angular/core';
import { InterleavedBufferAttribute } from 'three';
import * as i0 from "@angular/core";
import * as i1 from "@angular-three/core";
export class InterleavedBufferAttributeDirective {
    constructor(ngZone, geometryDirective) {
        this.ngZone = ngZone;
        this.geometryDirective = geometryDirective;
    }
    ngOnChanges() {
        this.ngZone.runOutsideAngular(() => {
            if (this.attribute) {
                this.attribute.needsUpdate = true;
            }
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.geometryDirective && this.attach) {
                this._attribute = new InterleavedBufferAttribute(...this.args);
                if (this.attribute) {
                    this.geometryDirective.bufferGeometry.setAttribute(this.attach, this.attribute);
                }
            }
        });
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.geometryDirective && this.attach) {
                this.geometryDirective.bufferGeometry.deleteAttribute(this.attach);
            }
        });
    }
    get attribute() {
        return this._attribute;
    }
}
InterleavedBufferAttributeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: InterleavedBufferAttributeDirective, deps: [{ token: i0.NgZone }, { token: i1.ThreeBufferGeometry, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
InterleavedBufferAttributeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: InterleavedBufferAttributeDirective, selector: "ngt-interleaved-buffer-attribute", inputs: { args: "args", attach: "attach" }, exportAs: ["ngtInterleavedBufferAttribute"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: InterleavedBufferAttributeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-interleaved-buffer-attribute',
                    exportAs: 'ngtInterleavedBufferAttribute',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.ThreeBufferGeometry, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { args: [{
                type: Input
            }], attach: [{
                type: Input
            }] } });
//# sourceMappingURL=interleaved-buffer-attribute.directive.js.map