{"version":3,"file":"math.pipe.js","sourceRoot":"","sources":["../../../../../../../packages/core/src/lib/pipes/math/math.pipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;;AAMpD,MAAM,OAAO,QAAQ;IACnB,SAAS,CACP,KAAwB,EACxB,SAWC;QAED,MAAM,MAAM,GAAa,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAChE,OAAQ,IAAI,CAAC,SAAS,CAA8C,CAClE,GAAG,MAAM,CAC+C,CAAC;IAC7D,CAAC;;sGApBU,QAAQ;oGAAR,QAAQ;4FAAR,QAAQ;kBAJpB,IAAI;mBAAC;oBACJ,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,IAAI;iBACX","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'math',\n  pure: true,\n})\nexport class MathPipe implements PipeTransform {\n  transform(\n    value: number | number[],\n    keyOfMath: keyof Omit<\n      Math,\n      | 'PI'\n      | 'E'\n      | 'LN2'\n      | 'LOG2E'\n      | 'LN10'\n      | 'LOG10E'\n      | 'SQRT1_2'\n      | 'SQRT2'\n      | 'random'\n    >\n  ): ReturnType<Extract<Math[typeof keyOfMath], 'string'>> {\n    const params: number[] = Array.isArray(value) ? value : [value];\n    return (Math[keyOfMath] as unknown as (...args: number[]) => number)(\n      ...params\n    ) as ReturnType<Extract<Math[typeof keyOfMath], 'string'>>;\n  }\n}\n"]}