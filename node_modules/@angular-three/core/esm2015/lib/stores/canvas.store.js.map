{"version":3,"file":"canvas.store.js","sourceRoot":"","sources":["../../../../../../packages/core/src/lib/stores/canvas.store.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AACtD,OAAO,EAAE,aAAa,EAAc,MAAM,MAAM,CAAC;AACjD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AACpE,OAAO,EACL,qBAAqB,EACrB,MAAM,EACN,KAAK,EACL,kBAAkB,EAClB,gBAAgB,EAChB,iBAAiB,EACjB,SAAS,EACT,KAAK,EACL,YAAY,EACZ,OAAO,EACP,OAAO,EACP,aAAa,GAEd,MAAM,OAAO,CAAC;AAaf,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AACtC,OAAO,EAAE,wBAAwB,EAAE,MAAM,uCAAuC,CAAC;;AAOjF,MAAM,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;AAC/B,MAAM,aAAa,GAAG,IAAI,OAAO,EAAE,CAAC;AAEpC,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,GAAW,EAA6B,EAAE,CAC7E,GAAG,IAAK,GAA0B,CAAC,oBAAoB,CAAC;AAG1D,MAAM,OAAO,WACX,SAAQ,wBAA0C;IAclD;QACE,KAAK,CAAC;YACJ,cAAc,EAAE,KAAK;YACrB,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,IAAI,OAAO,EAAE;YACpB,KAAK,EAAE,IAAI,KAAK,EAAE;YAClB,QAAQ,EAAE;gBACR,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;gBAC7B,GAAG,EAAE,CAAC;gBACN,QAAQ,EAAE;oBACR,UAAU,EAAE,CAAC;oBACb,GAAG,EAAE,CAAC;oBACN,KAAK,EAAE,CAAC;oBACR,MAAM,EAAE,CAAC;oBACT,MAAM,EAAE,CAAC;oBACT,QAAQ,EAAE,CAAC;oBACX,MAAM,EAAE,CAAC;oBACT,kBAAkB,EAAE,CAClB,MAAM,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,MAAM,EACzC,MAAM,GAAG,aAAa,EACtB,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,IAAI,EAC9C,EAAE;wBACF,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;wBAC/B,MAAM,MAAM,GAAG,KAAK,GAAG,MAAM,CAAC;wBAC9B,MAAM,QAAQ,GAAG,MAAO;6BACrB,gBAAgB,CAAC,QAAQ,CAAC;6BAC1B,UAAU,CAAC,MAAM,CAAC,CAAC;wBACtB,IAAI,oBAAoB,CAAC,MAAO,CAAC,EAAE;4BACjC,OAAO;gCACL,KAAK,EAAE,KAAK,GAAG,MAAM,CAAC,IAAI;gCAC1B,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,IAAI;gCAC5B,MAAM,EAAE,CAAC;gCACT,QAAQ;gCACR,MAAM;6BACP,CAAC;yBACH;wBAED,MAAM,GAAG,GAAG,CAAC,MAAO,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,kCAAkC;wBAC7E,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,iBAAiB;wBAC7D,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC;wBAC/B,OAAO;4BACL,KAAK,EAAE,CAAC;4BACR,MAAM,EAAE,CAAC;4BACT,MAAM,EAAE,KAAK,GAAG,CAAC;4BACjB,QAAQ;4BACR,MAAM;yBACP,CAAC;oBACJ,CAAC;iBACF;aACF;SACF,CAAC,CAAC;QA/DI,cAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3C,YAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACvC,WAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACrC,eAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAE7C,oBAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;QACvD,cAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3C,aAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACzC,YAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAChD,oBAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAqEjD,sBAAiB,GAAG,IAAI,CAAC,OAAO,CACvC,CAAC,KAAK,EAAE,cAAc,EAAE,EAAE,CAAC,iCAAM,KAAK,KAAE,cAAc,IAAG,CAC1D,CAAC;QACO,gBAAW,GAAG,IAAI,CAAC,OAAO,CAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,iCAC7D,KAAK,KACR,QAAQ,IACR,CAAC,CAAC;QACK,eAAU,GAAG,IAAI,CAAC,OAAO,CAChC,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,iCACf,KAAK,KACR,OAAO,IACP,CACH,CAAC;QACO,YAAO,GAAG,IAAI,CAAC,OAAO,CAAO,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,iCAClD,KAAK,KACR,QAAQ,kCAAO,KAAK,CAAC,QAAQ,KAAE,IAAI,OACnC,CAAC,CAAC;QACK,WAAM,GAAG,IAAI,CAAC,OAAO,CAAS,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,iCAClD,KAAK,KACR,QAAQ,kCAAO,KAAK,CAAC,QAAQ,KAAE,GAAG,OAClC,CAAC,CAAC;QACK,gBAAW,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,iCAC1C,KAAK,KACR,QAAQ,kCACH,KAAK,CAAC,QAAQ,KACjB,QAAQ,gDACH,KAAK,CAAC,QAAQ,CAAC,QAAQ,GACvB,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAC3C,KAAK,CAAC,MAAM,EACZ,aAAa,EACb,KAAK,CAAC,QAAQ,CAAC,IAAI,CACpB,KACD,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,UAG3B,CAAC,CAAC;QACK,cAAS,GAAG,IAAI,CAAC,OAAO,CAAU,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,iCACzD,KAAK,KACR,QAAQ,kCAAO,KAAK,CAAC,QAAQ,KAAE,MAAM,OACrC,CAAC,CAAC;QAEK,uBAAkB,GAAG,IAAI,CAAC,MAAM,CAAoB,CAAC,OAAO,EAAE,EAAE;YACvE,OAAO,OAAO,CAAC,IAAI,CACjB,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,EACnE,GAAG,CACD,CAAC,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,OAAO,CAKzC,EAAE,EAAE;gBACH,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC;oBACjC,MAAM;oBACN,SAAS,EAAE,IAAI;oBACf,eAAe,EAAE,kBAAkB;oBACnC,KAAK,EAAE,IAAI;iBACZ,CAAC,CAAC;gBAEH,IAAI,OAAO,EAAE;oBACX,QAAQ,CAAC,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;oBAClC,IAAI,OAAO,OAAO,KAAK,QAAQ;wBAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;;wBACxC,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,gBAAgB,CAAC;iBACjD;gBAED,IAAI,CAAC,QAAQ,EAAE;oBACb,QAAQ,CAAC,WAAW,GAAG,qBAAqB,CAAC;oBAC7C,QAAQ,CAAC,cAAc,GAAG,YAAY,CAAC;iBACxC;gBAED,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBAC1B,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBAC5B,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAE1C,IAAI,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;YAChC,CAAC,CACF,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEM,oBAAe,GAAG,IAAI,CAAC,MAAM,CACpC,CAAC,aAAa,EAAE,EAAE,CAChB,aAAa,CAAC,IAAI,CAChB,GAAG,CAAC,CAAC,YAAsC,EAAE,EAAE;YAC7C,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;YAC1B,UAAU,CAAC,KAAK,EAAE,YAA6B,CAAC,CAAC;YACjD,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CACH,CACJ,CAAC;QAEO,qBAAgB,GAAG,IAAI,CAAC,MAAM,CACrC,CAAC,cAAc,EAAE,EAAE,CACjB,cAAc,CAAC,IAAI,CACjB,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,EAC1D,GAAG,CACD,CAAC,CAAC,aAAa,EAAE,cAAc,EAAE,EAAE,IAAI,EAAE,CAIxC,EAAE,EAAE;;YACH,MAAM,QAAQ,GAAG,aAAa,YAAY,MAAM,CAAC;YACjD,IAAI,MAAwB,CAAC;YAE7B,IAAI,QAAQ,EAAE;gBACZ,MAAM,GAAG,aAAiC,CAAC;aAC5C;iBAAM;gBACL,IAAI,cAAc,EAAE;oBAClB,MAAM,GAAG,IAAI,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;oBACvD,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC;iBACnB;qBAAM;oBACL,MAAM,GAAG,IAAI,iBAAiB,CAC5B,EAAE,EACF,MAAA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,mCAAI,CAAC,EAC7B,GAAG,EACH,IAAI,CACL,CAAC;iBACH;gBAED,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;gBAEtB,UAAU,CAAC,MAAM,EAAE,aAA8B,CAAC,CAAC;gBACnD,gDAAgD;gBAChD,MAAM,CAAC,sBAAsB,EAAE,CAAC;aACjC;YAED,4BAA4B;YAC5B,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEvB,IAAI,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC5B,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,CACF,CACF,CACJ,CAAC;QAEO,wBAAmB,GAAG,IAAI,CAAC,MAAM,CACxC,CAAC,iBAAiB,EAAE,EAAE,CACpB,iBAAiB,CAAC,IAAI,CACpB,GAAG,CAAC,CAAC,gBAA8C,EAAE,EAAE;YACrD,MAAM,SAAS,GAAG,IAAI,SAAS,EAAoB,CAAC;YACpD,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;YACzB,UAAU,CACR,SAAqC,EACrC,gBAAiC,CAClC,CAAC;YACF,IAAI,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CACH,CACJ,CAAC;QAEO,uBAAkB,GAAG,IAAI,CAAC,MAAM,CACvC,CAAC,OAAO,EAAE,EAAE,CACV,OAAO,CAAC,IAAI,CACV,cAAc,CACZ,IAAI,CAAC,SAAsC,EAC3C,IAAI,CAAC,OAAuC,CAC7C,EACD,GAAG,CACD,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,CAIhC,EAAE,EAAE;YACH,IAAI,MAAM,CAAC,IAAI,KAAK,mBAAmB,EAAE;gBACvC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;aAC1C;iBAAM;gBACL,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;gBAC9B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC7B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAClC;YACD,MAAM,CAAC,sBAAsB,EAAE,CAAC;YAChC,MAAM,CAAC,iBAAiB,EAAE,CAAC;YAE3B,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAC5B,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC,CACF,CACF,CACJ,CAAC;QApMA,IAAI,CAAC,SAAS,CACZ,aAAa,CAAC;YACZ,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,OAAO;YACZ,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,UAAU;SAChB,CAAC,CAAC,IAAI,CACL,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EACnD,KAAK,CAAC,IAAI,CAAC,CACZ,CACF,CAAC;IACJ,CAAC;IA2LD,WAAW;QACT,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC/C,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC/B,QAAQ,CAAC,gBAAgB,EAAE,CAAC;SAC7B;QACD,KAAK,CAAC,WAAW,EAAE,CAAC;IACtB,CAAC;;yGAlRU,WAAW;6GAAX,WAAW;4FAAX,WAAW;kBADvB,UAAU","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, mapTo, tap, withLatestFrom } from 'rxjs/operators';\nimport {\n  ACESFilmicToneMapping,\n  Camera,\n  Clock,\n  OrthographicCamera,\n  PCFSoftShadowMap,\n  PerspectiveCamera,\n  Raycaster,\n  Scene,\n  sRGBEncoding,\n  Vector2,\n  Vector3,\n  WebGLRenderer,\n  WebGLShadowMap,\n} from 'three';\nimport type {\n  CameraOptions,\n  CanvasInternal,\n  CanvasStoreState,\n  RaycasterOptions,\n  SceneOptions,\n  Size,\n  ThreeCameraAlias,\n  ThreeInstance,\n  ThreeRaycaster,\n  UnknownRecord,\n} from '../typings';\nimport { applyProps } from '../utils';\nimport { ImperativeComponentStore } from './imperative-component-store.abstract';\n\ninterface WindowResizeEffectParams {\n  size: Size;\n  dpr: number;\n}\n\nconst position = new Vector3();\nconst defaultTarget = new Vector3();\n\nexport const isOrthographicCamera = (def: Camera): def is OrthographicCamera =>\n  def && (def as OrthographicCamera).isOrthographicCamera;\n\n@Injectable()\nexport class CanvasStore\n  extends ImperativeComponentStore<CanvasStoreState>\n  implements OnDestroy\n{\n  readonly renderer$ = this.select((s) => s.renderer);\n  readonly camera$ = this.select((s) => s.camera);\n  readonly scene$ = this.select((s) => s.scene);\n  readonly raycaster$ = this.select((s) => s.raycaster);\n\n  readonly isOrthographic$ = this.select((s) => s.isOrthographic);\n  readonly isLinear$ = this.select((s) => s.isLinear);\n  readonly shadows$ = this.select((s) => s.shadows);\n  readonly active$ = this.select((s) => s.internal.active);\n  readonly canvasInternal$ = this.select((s) => s.internal);\n\n  constructor() {\n    super({\n      isOrthographic: false,\n      isLinear: false,\n      shadows: false,\n      mouse: new Vector2(),\n      clock: new Clock(),\n      internal: {\n        active: false,\n        size: { width: 0, height: 0 },\n        dpr: 1,\n        viewport: {\n          initialDpr: 1,\n          dpr: 1,\n          width: 0,\n          height: 0,\n          aspect: 0,\n          distance: 0,\n          factor: 0,\n          getCurrentViewport: (\n            camera = this.getImperativeState().camera,\n            target = defaultTarget,\n            size = this.getImperativeState().internal.size\n          ) => {\n            const { width, height } = size;\n            const aspect = width / height;\n            const distance = camera!\n              .getWorldPosition(position)\n              .distanceTo(target);\n            if (isOrthographicCamera(camera!)) {\n              return {\n                width: width / camera.zoom,\n                height: height / camera.zoom,\n                factor: 1,\n                distance,\n                aspect,\n              };\n            }\n\n            const fov = (camera!.fov * Math.PI) / 180; // convert vertical fov to radians\n            const h = 2 * Math.tan(fov / 2) * distance; // visible height\n            const w = h * (width / height);\n            return {\n              width: w,\n              height: h,\n              factor: width / w,\n              distance,\n              aspect,\n            };\n          },\n        },\n      },\n    });\n\n    this.setActive(\n      combineLatest([\n        this.renderer$,\n        this.camera$,\n        this.scene$,\n        this.raycaster$,\n      ]).pipe(\n        filter((coreObjects) => coreObjects.every(Boolean)),\n        mapTo(true)\n      )\n    );\n  }\n\n  readonly setIsOrthographic = this.updater<boolean>(\n    (state, isOrthographic) => ({ ...state, isOrthographic })\n  );\n  readonly setIsLinear = this.updater<boolean>((state, isLinear) => ({\n    ...state,\n    isLinear,\n  }));\n  readonly setShadows = this.updater<boolean | Partial<WebGLShadowMap>>(\n    (state, shadows) => ({\n      ...state,\n      shadows,\n    })\n  );\n  readonly setSize = this.updater<Size>((state, size) => ({\n    ...state,\n    internal: { ...state.internal, size },\n  }));\n  readonly setDpr = this.updater<number>((state, dpr) => ({\n    ...state,\n    internal: { ...state.internal, dpr },\n  }));\n  readonly setViewport = this.updater((state) => ({\n    ...state,\n    internal: {\n      ...state.internal,\n      viewport: {\n        ...state.internal.viewport,\n        ...state.internal.viewport.getCurrentViewport(\n          state.camera,\n          defaultTarget,\n          state.internal.size\n        ),\n        dpr: state.internal.dpr,\n      },\n    },\n  }));\n  readonly setActive = this.updater<boolean>((state, active) => ({\n    ...state,\n    internal: { ...state.internal, active },\n  }));\n\n  readonly initRendererEffect = this.effect<HTMLCanvasElement>((canvas$) => {\n    return canvas$.pipe(\n      withLatestFrom(this.canvasInternal$, this.isLinear$, this.shadows$),\n      tap(\n        ([canvas, { size, dpr }, isLinear, shadows]: [\n          HTMLCanvasElement,\n          CanvasInternal,\n          boolean,\n          boolean | Partial<WebGLShadowMap>\n        ]) => {\n          const renderer = new WebGLRenderer({\n            canvas,\n            antialias: true,\n            powerPreference: 'high-performance',\n            alpha: true,\n          });\n\n          if (shadows) {\n            renderer.shadowMap.enabled = true;\n            if (typeof shadows === 'object')\n              Object.assign(renderer.shadowMap, shadows);\n            else renderer.shadowMap.type = PCFSoftShadowMap;\n          }\n\n          if (!isLinear) {\n            renderer.toneMapping = ACESFilmicToneMapping;\n            renderer.outputEncoding = sRGBEncoding;\n          }\n\n          renderer.setClearAlpha(0);\n          renderer.setPixelRatio(dpr);\n          renderer.setSize(size.width, size.height);\n\n          this.patchState({ renderer });\n        }\n      )\n    );\n  });\n\n  readonly initSceneEffect = this.effect<SceneOptions | undefined>(\n    (sceneOptions$) =>\n      sceneOptions$.pipe(\n        tap((sceneOptions: SceneOptions | undefined) => {\n          const scene = new Scene();\n          applyProps(scene, sceneOptions as UnknownRecord);\n          this.patchState({ scene });\n        })\n      )\n  );\n\n  readonly initCameraEffect = this.effect<CameraOptions | undefined>(\n    (cameraOptions$) =>\n      cameraOptions$.pipe(\n        withLatestFrom(this.isOrthographic$, this.canvasInternal$),\n        tap(\n          ([cameraOptions, isOrthographic, { size }]: [\n            CameraOptions | undefined,\n            boolean,\n            CanvasInternal\n          ]) => {\n            const isCamera = cameraOptions instanceof Camera;\n            let camera: ThreeCameraAlias;\n\n            if (isCamera) {\n              camera = cameraOptions as ThreeCameraAlias;\n            } else {\n              if (isOrthographic) {\n                camera = new OrthographicCamera(0, 0, 0, 0, 0.1, 1000);\n                camera.zoom = 100;\n              } else {\n                camera = new PerspectiveCamera(\n                  75,\n                  size.width / size.height ?? 0,\n                  0.1,\n                  1000\n                );\n              }\n\n              camera.position.z = 5;\n\n              applyProps(camera, cameraOptions as UnknownRecord);\n              // Update projection matrix after applying props\n              camera.updateProjectionMatrix();\n            }\n\n            // look at center by default\n            camera.lookAt(0, 0, 0);\n\n            this.patchState({ camera });\n            this.setViewport();\n          }\n        )\n      )\n  );\n\n  readonly initRaycasterEffect = this.effect<RaycasterOptions | undefined>(\n    (raycasterOptions$) =>\n      raycasterOptions$.pipe(\n        tap((raycasterOptions: RaycasterOptions | undefined) => {\n          const raycaster = new Raycaster() as ThreeRaycaster;\n          raycaster.enabled = true;\n          applyProps(\n            raycaster as unknown as ThreeInstance,\n            raycasterOptions as UnknownRecord\n          );\n          this.patchState({ raycaster });\n        })\n      )\n  );\n\n  readonly windowResizeEffect = this.effect<WindowResizeEffectParams>(\n    (params$) =>\n      params$.pipe(\n        withLatestFrom(\n          this.renderer$ as Observable<WebGLRenderer>,\n          this.camera$ as Observable<ThreeCameraAlias>\n        ),\n        tap(\n          ([{ dpr, size }, renderer, camera]: [\n            WindowResizeEffectParams,\n            WebGLRenderer,\n            ThreeCameraAlias\n          ]) => {\n            if (camera.type === 'PerspectiveCamera') {\n              camera.aspect = size.width / size.height;\n            } else {\n              camera.left = size.width / -2;\n              camera.right = size.width / 2;\n              camera.top = size.height / 2;\n              camera.bottom = size.height / -2;\n            }\n            camera.updateProjectionMatrix();\n            camera.updateMatrixWorld();\n\n            renderer.setPixelRatio(dpr);\n            renderer.setSize(size.width, size.height);\n            this.setSize(size);\n            this.setDpr(dpr);\n            this.setViewport();\n          }\n        )\n      )\n  );\n\n  ngOnDestroy() {\n    const { renderer } = this.getImperativeState();\n    if (renderer) {\n      renderer.renderLists.dispose();\n      renderer.forceContextLoss();\n    }\n    super.ngOnDestroy();\n  }\n}\n"]}