import { Injectable } from '@angular/core';
import { tap } from 'rxjs/operators';
import { createEvents } from '../utils';
import { CanvasStore } from './canvas.store';
import { ImperativeComponentStore } from './imperative-component-store.abstract';
import { InstancesStore } from './instances.store';
import * as i0 from "@angular/core";
import * as i1 from "./canvas.store";
import * as i2 from "./instances.store";
const events = {
    click: false,
    contextmenu: false,
    dblclick: false,
    wheel: true,
    pointerdown: true,
    pointerup: true,
    pointerleave: true,
    pointermove: true,
    pointercancel: true,
    lostpointercapture: true,
};
export class EventsStore extends ImperativeComponentStore {
    constructor(canvasStore, instancesStore) {
        super({
            connected: false,
            internal: {
                interaction: [],
                hovered: new Map(),
                capturedMap: new Map(),
                initialClick: [0, 0],
                initialHits: [],
            },
        });
        this.canvasStore = canvasStore;
        this.instancesStore = instancesStore;
        this.initHandlersEffect = this.effect((trigger$) => trigger$.pipe(tap(() => {
            const { handlePointer } = createEvents(() => this.canvasStore.getImperativeState(), () => this.getImperativeState(), () => this.instancesStore.getImperativeState());
            this.patchState({
                handlers: Object.keys(events).reduce((handlers, supportedEventName) => {
                    handlers[supportedEventName] = handlePointer(supportedEventName);
                    return handlers;
                }, {}),
            });
        })));
        this.connectEffect = this.effect((target$) => target$.pipe(tap((target) => {
            this.disconnectEffect();
            const { handlers } = this.getImperativeState();
            this.patchState({ connected: target });
            Object.entries(handlers !== null && handlers !== void 0 ? handlers : []).forEach(([name, event]) => {
                const passive = events[name];
                target.addEventListener(name, event, { passive });
            });
        })));
        this.disconnectEffect = this.effect((trigger$) => trigger$.pipe(tap(() => {
            const { handlers, connected } = this.getImperativeState();
            if (connected) {
                Object.entries(handlers !== null && handlers !== void 0 ? handlers : []).forEach(([name, event]) => {
                    if (connected instanceof HTMLElement) {
                        connected.removeEventListener(name, event);
                    }
                });
                this.patchState({ connected: false });
            }
        })));
        this.initHandlersEffect();
    }
    ngOnDestroy() {
        this.disconnectEffect();
        super.ngOnDestroy();
    }
}
EventsStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: EventsStore, deps: [{ token: i1.CanvasStore }, { token: i2.InstancesStore }], target: i0.ɵɵFactoryTarget.Injectable });
EventsStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: EventsStore });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: EventsStore, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CanvasStore }, { type: i2.InstancesStore }]; } });
//# sourceMappingURL=events.store.js.map