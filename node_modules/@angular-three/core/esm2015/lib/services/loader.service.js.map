{"version":3,"file":"loader.service.js","sourceRoot":"","sources":["../../../../../../packages/core/src/lib/services/loader.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { defer, forkJoin, Observable, of, shareReplay, throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport type { Material, Object3D, Scene } from 'three';\nimport type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\nimport type {\n  BranchingReturn,\n  LoaderExtensions,\n  ThreeLoaderResult,\n  ThreeObjectMap,\n  UnknownRecord,\n} from '../typings';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoaderService implements OnDestroy {\n  private readonly cached = new Map<string, BranchingReturn>();\n\n  use<TReturnType, TUrl extends string | string[]>(\n    loaderConstructor: new () => ThreeLoaderResult<TReturnType>,\n    input: TUrl,\n    extensions?: LoaderExtensions,\n    onProgress?: (event: ProgressEvent) => void\n  ): TUrl extends any[]\n    ? Observable<BranchingReturn<TReturnType, GLTF, GLTF & ThreeObjectMap>[]>\n    : Observable<BranchingReturn<TReturnType, GLTF, GLTF & ThreeObjectMap>> {\n    const keys = (Array.isArray(input) ? input : [input]) as string[];\n    const loader = new loaderConstructor();\n    if (extensions) {\n      extensions(loader);\n    }\n\n    const results$ = forkJoin(\n      keys.map((key) => {\n        if (this.cached.has(key)) {\n          return of(this.cached.get(key));\n        }\n\n        return defer(() => loader.loadAsync(key, onProgress)).pipe(\n          tap((data) => {\n            if (data.scene) {\n              Object.assign(data, this.buildGraph(data.scene as Scene));\n            }\n            this.cached.set(key, data);\n          }),\n          catchError((err) => {\n            console.error(`Error loading ${key}: ${err.message}`);\n            return throwError(err);\n          })\n        );\n      })\n    ) as Observable<\n      BranchingReturn<TReturnType, GLTF, GLTF & ThreeObjectMap>[]\n    >;\n\n    return defer(() =>\n      Array.isArray(input)\n        ? results$\n        : results$.pipe(map((results) => results[0]))\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true })) as TUrl extends any[]\n      ? Observable<BranchingReturn<TReturnType, GLTF, GLTF & ThreeObjectMap>[]>\n      : Observable<BranchingReturn<TReturnType, GLTF, GLTF & ThreeObjectMap>>;\n  }\n\n  ngOnDestroy() {\n    this.cached.clear();\n  }\n\n  private buildGraph(object: Object3D): ThreeObjectMap {\n    const data: ThreeObjectMap = { nodes: {}, materials: {} };\n    if (object) {\n      object.traverse((obj) => {\n        if (obj.name) {\n          data.nodes[obj.name] = obj;\n        }\n        if (\n          (obj as unknown as UnknownRecord).material &&\n          !data.materials[\n            (\n              (obj as unknown as UnknownRecord)\n                .material as unknown as UnknownRecord\n            ).name as string\n          ]\n        ) {\n          data.materials[\n            (\n              (obj as unknown as UnknownRecord)\n                .material as unknown as UnknownRecord\n            ).name as string\n          ] = (obj as unknown as UnknownRecord).material as Material;\n        }\n      });\n    }\n    return data;\n  }\n}\n"]}