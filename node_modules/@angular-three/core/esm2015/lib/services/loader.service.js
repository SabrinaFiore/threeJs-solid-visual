import { Injectable } from '@angular/core';
import { defer, forkJoin, of, shareReplay, throwError } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class LoaderService {
    constructor() {
        this.cached = new Map();
    }
    use(loaderConstructor, input, extensions, onProgress) {
        const keys = (Array.isArray(input) ? input : [input]);
        const loader = new loaderConstructor();
        if (extensions) {
            extensions(loader);
        }
        const results$ = forkJoin(keys.map((key) => {
            if (this.cached.has(key)) {
                return of(this.cached.get(key));
            }
            return defer(() => loader.loadAsync(key, onProgress)).pipe(tap((data) => {
                if (data.scene) {
                    Object.assign(data, this.buildGraph(data.scene));
                }
                this.cached.set(key, data);
            }), catchError((err) => {
                console.error(`Error loading ${key}: ${err.message}`);
                return throwError(err);
            }));
        }));
        return defer(() => Array.isArray(input)
            ? results$
            : results$.pipe(map((results) => results[0]))).pipe(shareReplay({ bufferSize: 1, refCount: true }));
    }
    ngOnDestroy() {
        this.cached.clear();
    }
    buildGraph(object) {
        const data = { nodes: {}, materials: {} };
        if (object) {
            object.traverse((obj) => {
                if (obj.name) {
                    data.nodes[obj.name] = obj;
                }
                if (obj.material &&
                    !data.materials[obj
                        .material.name]) {
                    data.materials[obj
                        .material.name] = obj.material;
                }
            });
        }
        return data;
    }
}
LoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: LoaderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
LoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: LoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: LoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=loader.service.js.map