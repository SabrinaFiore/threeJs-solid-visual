{"version":3,"file":"repeat.directive.js","sourceRoot":"","sources":["../../../../../../../packages/core/src/lib/directives/repeat/repeat.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,MAAM,EACN,KAAK,EACL,WAAW,EACX,gBAAgB,GACjB,MAAM,eAAe,CAAC;;AAEvB,MAAM,SAAS,GAAG,OAAO,CAAC;AAa1B,MAAM,OAAO,eAAe;IAa1B,YAC6C,aAA+B,EAEzD,WAAuC;QAFb,kBAAa,GAAb,aAAa,CAAkB;QAEzD,gBAAW,GAAX,WAAW,CAA4B;IACvD,CAAC;IAhBJ,IACI,QAAQ,CAAC,KAAa;QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QACtE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;QAEtC,IAAI,SAAS,GAAG,MAAM,EAAE;YACtB,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;SAC3C;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SACvC;IACH,CAAC;IAQO,aAAa,CAAC,MAAc,EAAE,KAAa;QACjD,KAAK,IAAI,KAAK,GAAG,MAAM,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE;YAC/C,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAgB,IAAI,CAAC,WAAW,EAAE;gBACrE,SAAS,EAAE,KAAK;gBAChB,OAAO,EAAE,KAAK,KAAK,MAAM;gBACzB,MAAM,EAAE,KAAK,KAAK,KAAK,GAAG,CAAC;gBAC3B,KAAK,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;gBACnB,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;aACtB,CAAC,CAAC;SACJ;IACH,CAAC;IAEO,gBAAgB,CAAC,MAAc;QACrC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,MAAM,EAAE,KAAK,EAAE,EAAE;YAC3C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;SAC7B;IACH,CAAC;IAED,MAAM,CAAC,sBAAsB,CAC3B,GAAoB,EACpB,GAAY;QAEZ,OAAO,IAAI,CAAC;IACd,CAAC;;6GA1CU,eAAe,kBAchB,gBAAgB,aAChB,WAAW;iGAfV,eAAe;4FAAf,eAAe;kBAH3B,SAAS;mBAAC;oBACT,QAAQ,EAAE,oBAAoB;iBAC/B;;0BAeI,MAAM;2BAAC,gBAAgB;;0BACvB,MAAM;2BAAC,WAAW;4CAbjB,QAAQ;sBADX,KAAK","sourcesContent":["import {\n  Directive,\n  Inject,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nconst MAX_VALUE = 0x10000;\n\nexport interface RepeatContext {\n  $implicit: number;\n  isOdd: boolean;\n  isEven: boolean;\n  isFirst: boolean;\n  isLast: boolean;\n}\n\n@Directive({\n  selector: '[repeat][repeatOf]',\n})\nexport class RepeatDirective {\n  @Input()\n  set repeatOf(count: number) {\n    const safeCount = Math.floor(Math.max(0, Math.min(count, MAX_VALUE)));\n    const { length } = this.viewContainer;\n\n    if (safeCount < length) {\n      this.removeContainers(length - safeCount);\n    } else {\n      this.addContainers(length, safeCount);\n    }\n  }\n\n  constructor(\n    @Inject(ViewContainerRef) private readonly viewContainer: ViewContainerRef,\n    @Inject(TemplateRef)\n    private readonly templateRef: TemplateRef<RepeatContext>\n  ) {}\n\n  private addContainers(length: number, count: number) {\n    for (let index = length; index < count; index++) {\n      this.viewContainer.createEmbeddedView<RepeatContext>(this.templateRef, {\n        $implicit: index,\n        isFirst: index === length,\n        isLast: index === count - 1,\n        isOdd: !(index % 2),\n        isEven: !!(index % 2),\n      });\n    }\n  }\n\n  private removeContainers(amount: number) {\n    for (let index = 0; index < amount; index++) {\n      this.viewContainer.remove();\n    }\n  }\n\n  static ngTemplateContextGuard(\n    dir: RepeatDirective,\n    ctx: unknown\n  ): ctx is RepeatContext {\n    return true;\n  }\n}\n"]}