import { Directive, Inject, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import * as i0 from "@angular/core";
const MAX_VALUE = 0x10000;
export class RepeatDirective {
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
    }
    set repeatOf(count) {
        const safeCount = Math.floor(Math.max(0, Math.min(count, MAX_VALUE)));
        const { length } = this.viewContainer;
        if (safeCount < length) {
            this.removeContainers(length - safeCount);
        }
        else {
            this.addContainers(length, safeCount);
        }
    }
    addContainers(length, count) {
        for (let index = length; index < count; index++) {
            this.viewContainer.createEmbeddedView(this.templateRef, {
                $implicit: index,
                isFirst: index === length,
                isLast: index === count - 1,
                isOdd: !(index % 2),
                isEven: !!(index % 2),
            });
        }
    }
    removeContainers(amount) {
        for (let index = 0; index < amount; index++) {
            this.viewContainer.remove();
        }
    }
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
}
RepeatDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: RepeatDirective, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
RepeatDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: RepeatDirective, selector: "[repeat][repeatOf]", inputs: { repeatOf: "repeatOf" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: RepeatDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[repeat][repeatOf]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { repeatOf: [{
                type: Input
            }] } });
//# sourceMappingURL=repeat.directive.js.map