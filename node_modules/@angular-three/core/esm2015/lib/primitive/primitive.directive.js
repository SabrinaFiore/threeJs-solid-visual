import { Directive, EventEmitter, Inject, Input, NgZone, Optional, Output, SkipSelf, } from '@angular/core';
import { Object3D } from 'three';
import { AnimationLoopParticipant, ThreeObject3d } from '../abstracts';
import { Object3dControllerDirective } from '../controllers';
import { OBJECT_3D_CONTROLLER_PROVIDER, OBJECT_3D_WATCHED_CONTROLLER, } from '../di';
import { AnimationStore, CanvasStore } from '../stores';
import * as i0 from "@angular/core";
import * as i1 from "../stores";
import * as i2 from "../abstracts";
import * as i3 from "../controllers";
export class PrimitiveDirective extends AnimationLoopParticipant {
    constructor(animationStore, ngZone, object3dController, canvasStore, parentObjectDirective) {
        super(animationStore, ngZone);
        this.animationStore = animationStore;
        this.ngZone = ngZone;
        this.object3dController = object3dController;
        this.canvasStore = canvasStore;
        this.parentObjectDirective = parentObjectDirective;
        this.ready = new EventEmitter();
    }
    get object() {
        return this._object;
    }
    set object(value) {
        if (value == null) {
            console.error('[object] is required');
        }
        this._object = value;
        if (value) {
            this.ready.emit(value);
            this.participate(value);
        }
    }
    get object3d() {
        return this._object;
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.appendToParent();
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.ngZone.runOutsideAngular(() => {
            if (this.object3d) {
                this.remove();
            }
        });
    }
    appendToParent() {
        if (this.object3d && this.object3d instanceof Object3D) {
            if (this.object3dController.appendTo) {
                this.object3dController.appendTo.add(this.object3d);
                return;
            }
            const { scene } = this.canvasStore.getImperativeState();
            if (this.object3dController.appendMode === 'root') {
                if (scene) {
                    scene.add(this.object3d);
                }
                return;
            }
            if (this.object3dController.appendMode === 'immediate') {
                if (this.parentObjectDirective) {
                    this.parentObjectDirective.object3d.add(this.object3d);
                }
                else {
                    if (scene) {
                        scene.add(this.object3d);
                    }
                }
            }
        }
    }
    remove() {
        if (this.object3d instanceof Object3D) {
            if (this.object3dController.appendTo) {
                this.object3dController.appendTo.remove(this.object3d);
            }
            else if (this.parentObjectDirective &&
                this.object3dController.appendMode === 'immediate') {
                this.parentObjectDirective.object3d.remove(this.object3d);
            }
            else {
                const { scene } = this.canvasStore.getImperativeState();
                if (scene) {
                    scene.remove(this.object3d);
                }
            }
            this.object3d.clear();
        }
    }
}
PrimitiveDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: PrimitiveDirective, deps: [{ token: i1.AnimationStore }, { token: i0.NgZone }, { token: OBJECT_3D_WATCHED_CONTROLLER }, { token: i1.CanvasStore }, { token: i2.ThreeObject3d, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
PrimitiveDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: PrimitiveDirective, selector: "ngt-primitive", inputs: { object: "object" }, outputs: { ready: "ready" }, providers: [
        {
            provide: ThreeObject3d,
            useExisting: PrimitiveDirective,
        },
        OBJECT_3D_CONTROLLER_PROVIDER,
    ], exportAs: ["ngtPrimitive"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: PrimitiveDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-primitive',
                    exportAs: 'ngtPrimitive',
                    providers: [
                        {
                            provide: ThreeObject3d,
                            useExisting: PrimitiveDirective,
                        },
                        OBJECT_3D_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.AnimationStore }, { type: i0.NgZone }, { type: i3.Object3dControllerDirective, decorators: [{
                    type: Inject,
                    args: [OBJECT_3D_WATCHED_CONTROLLER]
                }] }, { type: i1.CanvasStore }, { type: i2.ThreeObject3d, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { ready: [{
                type: Output
            }], object: [{
                type: Input
            }] } });
//# sourceMappingURL=primitive.directive.js.map