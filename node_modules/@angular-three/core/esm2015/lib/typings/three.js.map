{"version":3,"file":"three.js","sourceRoot":"","sources":["../../../../../../packages/core/src/lib/typings/three.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  Color,\n  Euler,\n  Layers,\n  Matrix4,\n  Quaternion,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nexport type NonFunctionKeys<T> = {\n  [K in keyof T]: T[K] extends Function ? never : K;\n}[keyof T];\nexport type Overwrite<T, O> = Omit<T, NonFunctionKeys<O>> & O;\n\nexport type ThreeEuler = Euler | Parameters<Euler['set']>;\nexport type ThreeMatrix4 = Matrix4 | Parameters<Matrix4['set']>;\nexport type ThreeVector2 =\n  | Vector2\n  | Parameters<Vector2['set']>\n  | Parameters<Vector2['setScalar']>[0];\nexport type ThreeVector3 =\n  | Vector3\n  | Parameters<Vector3['set']>\n  | Parameters<Vector3['setScalar']>[0];\nexport type ThreeVector4 =\n  | Vector4\n  | Parameters<Vector4['set']>\n  | Parameters<Vector4['setScalar']>[0];\nexport type ThreeColor =\n  | ConstructorParameters<typeof Color>\n  | Color\n  | number\n  | string; // Parameters<T> will not work here because of multiple function signatures in three.js types\nexport type ThreeColorArray = typeof Color | Parameters<Color['set']>;\nexport type ThreeLayers = Layers | Parameters<Layers['set']>[0];\nexport type ThreeQuaternion = Quaternion | Parameters<Quaternion['set']>;\n\nexport interface ThreeCommonParameters {\n  position?: ThreeVector3;\n  up?: ThreeVector3;\n  scale?: ThreeVector3;\n  rotation?: ThreeEuler;\n  matrix?: ThreeMatrix4;\n  quaternion?: ThreeQuaternion;\n  layers?: ThreeLayers;\n  background?: ThreeColor;\n  dispose?: (() => void) | null;\n}\n"]}