function applyDottedPathProps(instance, key, propAtKey, isRoot = true) {
    const [first, ...paths] = key.split('.');
    const rootChild = instance[first];
    if (rootChild == null) {
        return;
    }
    if (paths.length >= 1) {
        applyDottedPathProps(rootChild, paths.join('.'), propAtKey, false);
    }
    else {
        instance[first] = propAtKey;
    }
    if (isRoot) {
        checkNeedsUpdate(rootChild);
    }
}
function checkNeedsUpdate(value) {
    if (typeof value === 'object' && 'needsUpdate' in value) {
        value['needsUpdate'] = true;
    }
}
/**
 * Apply props on instances
 *
 * @internal
 * @private
 */
export function applyProps(instance, props) {
    if (!props || (props && !Object.keys(props).length))
        return;
    if ('__ngt' in props) {
        instance['__ngt'] = props['__ngt'];
    }
    const unknownInstance = instance;
    if (unknownInstance['set'] != null &&
        typeof unknownInstance['set'] === 'function') {
        unknownInstance['set'](props);
    }
    for (const [key, propAtKey] of Object.entries(props)) {
        if (key.split('.').length > 1) {
            applyDottedPathProps(instance, key, propAtKey);
        }
        else {
            const threeInstancePropAtKey = unknownInstance[key];
            if (threeInstancePropAtKey == null) {
                unknownInstance[key] = propAtKey;
            }
            else {
                if (threeInstancePropAtKey['set'] != null &&
                    typeof threeInstancePropAtKey['set'] === 'function') {
                    if (Array.isArray(propAtKey)) {
                        if (threeInstancePropAtKey['fromArray'] != null &&
                            typeof threeInstancePropAtKey['fromArray'] === 'function') {
                            threeInstancePropAtKey['fromArray'](propAtKey);
                        }
                        else {
                            threeInstancePropAtKey['set'](...propAtKey);
                        }
                    }
                    else {
                        threeInstancePropAtKey['set'](propAtKey);
                    }
                }
                else {
                    unknownInstance[key] = propAtKey;
                }
            }
            checkNeedsUpdate(propAtKey);
        }
    }
}
//# sourceMappingURL=apply-props.util.js.map