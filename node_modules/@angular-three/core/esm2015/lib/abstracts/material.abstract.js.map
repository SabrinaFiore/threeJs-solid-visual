{"version":3,"file":"material.abstract.js","sourceRoot":"","sources":["../../../../../../packages/core/src/lib/abstracts/material.abstract.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EAGN,QAAQ,GACT,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,KAAK,EAAgC,MAAM,OAAO,CAAC;AAC5D,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,WAAW,CAAC;;;AAIxD,MAAM,OAAgB,aAAa;IAwBjC,YACqB,MAAc,EACF,cAA8B,EAC9B,WAAwB;QAFpC,WAAM,GAAN,MAAM,CAAQ;QACF,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;IACtD,CAAC;IArBJ,IAAa,UAAU,CAAC,CAAkC;QACxD,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;gBACjC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;YACnC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAYD,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC5C;YACD,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxD,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;gBAC/B,EAAE,EAAE,IAAI,CAAC,KAAK;gBACd,QAAQ,EAAE,IAAI,CAAC,SAAS;aACzB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEO,oBAAoB,CAAC,UAA+B;QAC1D,IAAI,OAAO,IAAI,UAAU,EAAE;YACzB,MAAM,WAAW,GAAI,UAA4B,CAAC,OAAO,CAAe,CAAC;YACxE,UAA4B,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;gBACjE,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,WAAW,CAAC;gBAC3B,CAAC,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;YAE3B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,QAAQ,EAAE;gBACjD,UAA4B,CAAC,OAAO,CAAW,CAAC,mBAAmB,EAAE,CAAC;aACzE;SACF;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACrE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;2GAtEmB,aAAa;+FAAb,aAAa;4FAAb,aAAa;kBADlC,SAAS;;0BA2BL,QAAQ;;0BACR,QAAQ;4CAtBF,KAAK;sBAAb,KAAK;gBAEO,UAAU;sBAAtB,KAAK","sourcesContent":["import {\n  Directive,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  SkipSelf,\n} from '@angular/core';\nimport { Color, Material, MaterialParameters } from 'three';\nimport { CanvasStore, InstancesStore } from '../stores';\nimport type { AnyConstructor, ThreeColor, UnknownRecord } from '../typings';\n\n@Directive()\nexport abstract class ThreeMaterial<\n  TMaterial extends Material = Material,\n  TMaterialParameters extends MaterialParameters = MaterialParameters\n> implements OnInit, OnDestroy\n{\n  @Input() ngtId?: string;\n\n  @Input() set parameters(v: TMaterialParameters | undefined) {\n    this._parameters = v;\n    if (v && this.material) {\n      this.ngZone.runOutsideAngular(() => {\n        this.convertColorToLinear(v);\n        this.material.setValues(v);\n        this.material.needsUpdate = true;\n      });\n    }\n  }\n\n  get parameters(): TMaterialParameters | undefined {\n    return this._parameters;\n  }\n\n  private _parameters?: TMaterialParameters;\n\n  constructor(\n    protected readonly ngZone: NgZone,\n    @SkipSelf() protected readonly instancesStore: InstancesStore,\n    @SkipSelf() protected readonly canvasStore: CanvasStore\n  ) {}\n\n  abstract materialType: AnyConstructor<TMaterial>;\n\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.parameters) {\n        this.convertColorToLinear(this.parameters);\n      }\n      this._material = new this.materialType(this.parameters);\n      this.instancesStore.saveMaterial({\n        id: this.ngtId,\n        material: this._material,\n      });\n    });\n  }\n\n  private _material!: TMaterial;\n  get material(): TMaterial {\n    return this._material;\n  }\n\n  private convertColorToLinear(parameters: TMaterialParameters) {\n    if ('color' in parameters) {\n      const colorParams = (parameters as UnknownRecord)['color'] as ThreeColor;\n      (parameters as UnknownRecord)['color'] = Array.isArray(colorParams)\n        ? new Color(...colorParams)\n        : new Color(colorParams);\n\n      if (!this.canvasStore.getImperativeState().isLinear) {\n        ((parameters as UnknownRecord)['color'] as Color).convertSRGBToLinear();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.material) {\n        this.instancesStore.removeMaterial(this.ngtId || this.material.uuid);\n        this.material.dispose();\n      }\n    });\n  }\n}\n"]}