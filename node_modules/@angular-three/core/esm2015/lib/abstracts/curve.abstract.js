import { Directive, Input, NgZone, Optional } from '@angular/core';
import { ThreeBufferGeometry } from './geometry.abstract';
import * as i0 from "@angular/core";
import * as i1 from "./geometry.abstract";
export class ThreeCurve {
    constructor(ngZone, geometryDirective) {
        this.ngZone = ngZone;
        this.geometryDirective = geometryDirective;
        this._extraArgs = [];
    }
    set extraArgs(v) {
        this._extraArgs = v;
        this.ngZone.runOutsideAngular(() => {
            this.init();
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.curve) {
                this.init();
            }
        });
    }
    init() {
        this._curve = new this.curveType(...this._extraArgs);
        if (this.curve && this.geometryDirective) {
            const points = this.curve.getPoints(this.divisions);
            this.geometryDirective.bufferGeometry.setFromPoints(points);
        }
    }
    get curve() {
        return this._curve;
    }
}
ThreeCurve.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeCurve, deps: [{ token: i0.NgZone }, { token: i1.ThreeBufferGeometry, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
ThreeCurve.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: ThreeCurve, inputs: { divisions: "divisions" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeCurve, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.ThreeBufferGeometry, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { divisions: [{
                type: Input
            }] } });
//# sourceMappingURL=curve.abstract.js.map