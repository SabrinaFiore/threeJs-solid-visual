{"version":3,"file":"attribute.abstract.js","sourceRoot":"","sources":["../../../../../../packages/core/src/lib/abstracts/attribute.abstract.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EAIN,QAAQ,GACT,MAAM,eAAe,CAAC;AAIvB,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;;;AAG1D,MAAM,OAAgB,cAAc;IAQlC,YACqB,MAAc,EACF,iBAAuC;QADnD,WAAM,GAAN,MAAM,CAAQ;QACF,sBAAiB,GAAjB,iBAAiB,CAAsB;QAGhE,eAAU,GAAc,EAAE,CAAC;IAFhC,CAAC;IAIJ,IAAc,SAAS,CAAC,CAAY;QAClC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAID,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC;aACnC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,IAAI,CAAC,IAAI,EAAE,CAAC;aACb;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,IAAI;QACV,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,MAAM,EAAE;YACzC,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7D,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,YAAY,CAChD,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,SAAS,CACf,CAAC;aACH;SACF;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,MAAM,EAAE;gBACzC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACpE;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;;4GA9DmB,cAAc;gGAAd,cAAc;4FAAd,cAAc;kBADnC,SAAS;;0BAWL,QAAQ;4CANF,MAAM;sBAAd,KAAK","sourcesContent":["import {\n  Directive,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport type { BuiltinShaderAttributeName } from 'three';\nimport { BufferAttribute } from 'three';\nimport type { AnyConstructor } from '../typings';\nimport { ThreeBufferGeometry } from './geometry.abstract';\n\n@Directive()\nexport abstract class ThreeAttribute<\n  TAttribute extends BufferAttribute = BufferAttribute\n> implements OnInit, OnChanges, OnDestroy\n{\n  @Input() attach?: BuiltinShaderAttributeName;\n\n  abstract attributeType: AnyConstructor<TAttribute>;\n\n  constructor(\n    protected readonly ngZone: NgZone,\n    @Optional() protected readonly geometryDirective?: ThreeBufferGeometry\n  ) {}\n\n  private _extraArgs: unknown[] = [];\n\n  protected set extraArgs(v: unknown[]) {\n    this._extraArgs = v;\n    this.ngZone.runOutsideAngular(() => {\n      this.init();\n    });\n  }\n\n  private _attribute?: TAttribute;\n\n  ngOnChanges() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.attribute) {\n        this.attribute.needsUpdate = true;\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      if (!this.attribute) {\n        this.init();\n      }\n    });\n  }\n\n  private init() {\n    if (this.geometryDirective && this.attach) {\n      this._attribute = new this.attributeType(...this._extraArgs);\n      if (this.attribute) {\n        this.geometryDirective.bufferGeometry.setAttribute(\n          this.attach,\n          this.attribute\n        );\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.ngZone.runOutsideAngular(() => {\n      if (this.geometryDirective && this.attach) {\n        this.geometryDirective.bufferGeometry.deleteAttribute(this.attach);\n      }\n    });\n  }\n\n  get attribute(): TAttribute | undefined {\n    return this._attribute;\n  }\n}\n"]}