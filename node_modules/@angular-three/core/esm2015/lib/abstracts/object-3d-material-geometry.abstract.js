import { Directive, Input } from '@angular/core';
import { BufferGeometry, Material } from 'three';
import { ThreeObject3d } from './object-3d.abstract';
import * as i0 from "@angular/core";
export class ThreeObject3dMaterialGeometry extends ThreeObject3d {
    set extraArgs(v) {
        this._extraArgs = v;
    }
    ngAfterContentInit() {
        this.init();
    }
    initObject() {
        if (this.canCreate()) {
            const material = this.getMaterial();
            const geometry = this.getGeometry();
            this._objectMaterialGeometry = new this.objectType(geometry, material, ...(this._extraArgs || []));
            if (this.morphTargetDictionary &&
                'morphTargetDictionary' in this._objectMaterialGeometry) {
                this._objectMaterialGeometry.morphTargetDictionary =
                    this.morphTargetDictionary;
            }
            if (this.morphTargetInfluences &&
                'morphTargetInfluences' in this._objectMaterialGeometry) {
                this._objectMaterialGeometry.morphTargetInfluences =
                    this.morphTargetInfluences;
            }
            if (this.customize) {
                this.customize();
            }
        }
    }
    canCreate() {
        return true;
    }
    get object3d() {
        return this._objectMaterialGeometry;
    }
    getMaterial() {
        if (this.material) {
            if ((Array.isArray(this.material) &&
                this.material[0] instanceof Material) ||
                this.material instanceof Material) {
                return this.material;
            }
            if (Array.isArray(this.material)) {
                return this.material.map((materialId) => this.instancesStore.getImperativeState().materials[materialId]);
            }
            return this.instancesStore.getImperativeState().materials[this.material];
        }
        return undefined;
    }
    getGeometry() {
        if (this.geometry) {
            if (this.geometry instanceof BufferGeometry) {
                return this.geometry;
            }
            return this.instancesStore.getImperativeState().bufferGeometries[this.geometry];
        }
        return undefined;
    }
}
ThreeObject3dMaterialGeometry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeObject3dMaterialGeometry, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ThreeObject3dMaterialGeometry.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: ThreeObject3dMaterialGeometry, inputs: { geometry: "geometry", material: "material", morphTargetInfluences: "morphTargetInfluences", morphTargetDictionary: "morphTargetDictionary" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeObject3dMaterialGeometry, decorators: [{
            type: Directive
        }], propDecorators: { geometry: [{
                type: Input
            }], material: [{
                type: Input
            }], morphTargetInfluences: [{
                type: Input
            }], morphTargetDictionary: [{
                type: Input
            }] } });
//# sourceMappingURL=object-3d-material-geometry.abstract.js.map