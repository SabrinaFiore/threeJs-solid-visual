import { ContentChild, ContentChildren, Directive } from '@angular/core';
import { ThreeBufferGeometry } from './geometry.abstract';
import { ThreeMaterial } from './material.abstract';
import { ThreeObject3dMaterialGeometry } from './object-3d-material-geometry.abstract';
import * as i0 from "@angular/core";
export class ThreeMesh extends ThreeObject3dMaterialGeometry {
    set materialDirectives(v) {
        if (this.material == null && v) {
            this.material =
                v.length === 1
                    ? v.first.material
                    : v.toArray().map((dir) => dir.material);
        }
    }
    set bufferGeometryDirective(v) {
        if (this.geometry == null && v) {
            this.geometry = v.bufferGeometry;
        }
    }
    get objectType() {
        return this.meshType;
    }
}
ThreeMesh.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeMesh, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ThreeMesh.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: ThreeMesh, queries: [{ propertyName: "bufferGeometryDirective", first: true, predicate: ThreeBufferGeometry, descendants: true }, { propertyName: "materialDirectives", predicate: ThreeMaterial }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeMesh, decorators: [{
            type: Directive
        }], propDecorators: { materialDirectives: [{
                type: ContentChildren,
                args: [ThreeMaterial]
            }], bufferGeometryDirective: [{
                type: ContentChild,
                args: [ThreeBufferGeometry]
            }] } });
//# sourceMappingURL=mesh.abstract.js.map