{"version":3,"file":"line.abstract.js","sourceRoot":"","sources":["../../../../../../packages/core/src/lib/abstracts/line.abstract.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAGzE,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAC1D,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,6BAA6B,EAAE,MAAM,wCAAwC,CAAC;;AAGvF,MAAM,OAAgB,SAEpB,SAAQ,6BAAoC;IAC5C,IAAoC,kBAAkB,CACpD,CAA2B;QAE3B,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,QAAQ;gBACX,CAAC,CAAC,MAAM,KAAK,CAAC;oBACZ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ;oBAClB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,IACI,uBAAuB,CAAC,CAAsB;QAChD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;YACzB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,cAAc,CAAC;SAClC;IACH,CAAC;IAID,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;;uGAzBmB,SAAS;2FAAT,SAAS,+EAcf,mBAAmB,wEAXhB,aAAa;4FAHV,SAAS;kBAD9B,SAAS;8BAI4B,kBAAkB;sBAArD,eAAe;uBAAC,aAAa;gBAY1B,uBAAuB;sBAD1B,YAAY;uBAAC,mBAAmB","sourcesContent":["import type { QueryList } from '@angular/core';\nimport { ContentChild, ContentChildren, Directive } from '@angular/core';\nimport { Line } from 'three';\nimport type { AnyConstructor } from '../typings';\nimport { ThreeBufferGeometry } from './geometry.abstract';\nimport { ThreeMaterial } from './material.abstract';\nimport { ThreeObject3dMaterialGeometry } from './object-3d-material-geometry.abstract';\n\n@Directive()\nexport abstract class ThreeLine<\n  TLine extends Line = Line\n> extends ThreeObject3dMaterialGeometry<TLine> {\n  @ContentChildren(ThreeMaterial) set materialDirectives(\n    v: QueryList<ThreeMaterial>\n  ) {\n    if (this.material == null && v) {\n      this.material =\n        v.length === 1\n          ? v.first.material\n          : v.toArray().map((dir) => dir.material);\n    }\n  }\n\n  @ContentChild(ThreeBufferGeometry)\n  set bufferGeometryDirective(v: ThreeBufferGeometry) {\n    if (this.geometry == null) {\n      this.geometry = v.bufferGeometry;\n    }\n  }\n\n  abstract lineType: AnyConstructor<TLine>;\n\n  get objectType(): AnyConstructor<TLine> {\n    return this.lineType;\n  }\n}\n"]}