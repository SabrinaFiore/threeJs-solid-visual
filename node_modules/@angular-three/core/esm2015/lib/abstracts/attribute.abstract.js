import { Directive, Input, NgZone, Optional, } from '@angular/core';
import { ThreeBufferGeometry } from './geometry.abstract';
import * as i0 from "@angular/core";
import * as i1 from "./geometry.abstract";
export class ThreeAttribute {
    constructor(ngZone, geometryDirective) {
        this.ngZone = ngZone;
        this.geometryDirective = geometryDirective;
        this._extraArgs = [];
    }
    set extraArgs(v) {
        this._extraArgs = v;
        this.ngZone.runOutsideAngular(() => {
            this.init();
        });
    }
    ngOnChanges() {
        this.ngZone.runOutsideAngular(() => {
            if (this.attribute) {
                this.attribute.needsUpdate = true;
            }
        });
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.attribute) {
                this.init();
            }
        });
    }
    init() {
        if (this.geometryDirective && this.attach) {
            this._attribute = new this.attributeType(...this._extraArgs);
            if (this.attribute) {
                this.geometryDirective.bufferGeometry.setAttribute(this.attach, this.attribute);
            }
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.geometryDirective && this.attach) {
                this.geometryDirective.bufferGeometry.deleteAttribute(this.attach);
            }
        });
    }
    get attribute() {
        return this._attribute;
    }
}
ThreeAttribute.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAttribute, deps: [{ token: i0.NgZone }, { token: i1.ThreeBufferGeometry, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
ThreeAttribute.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: ThreeAttribute, inputs: { attach: "attach" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAttribute, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.ThreeBufferGeometry, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { attach: [{
                type: Input
            }] } });
//# sourceMappingURL=attribute.abstract.js.map