{"version":3,"file":"curve.abstract.js","sourceRoot":"","sources":["../../../../../../packages/core/src/lib/abstracts/curve.abstract.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAU,QAAQ,EAAE,MAAM,eAAe,CAAC;AAG3E,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;;;AAG1D,MAAM,OAAgB,UAAU;IAgB9B,YACmB,MAAc,EACF,iBAAuC;QADnD,WAAM,GAAN,MAAM,CAAQ;QACF,sBAAiB,GAAjB,iBAAiB,CAAsB;QAX9D,eAAU,GAAc,EAAE,CAAC;IAYhC,CAAC;IAVJ,IAAc,SAAS,CAAC,CAAY;QAClC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IASD,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACf,IAAI,CAAC,IAAI,EAAE,CAAC;aACb;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACpD,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,aAAa,CACjD,MAA0C,CAC3C,CAAC;SACH;IACH,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;;wGA3CmB,UAAU;4FAAV,UAAU;4FAAV,UAAU;kBAD/B,SAAS;;0BAmBL,QAAQ;4CAfF,SAAS;sBAAjB,KAAK","sourcesContent":["import { Directive, Input, NgZone, OnInit, Optional } from '@angular/core';\nimport { Curve, Vector, Vector2, Vector3 } from 'three';\nimport type { AnyConstructor } from '../typings';\nimport { ThreeBufferGeometry } from './geometry.abstract';\n\n@Directive()\nexport abstract class ThreeCurve<TCurve extends Curve<Vector> = Curve<Vector>>\n  implements OnInit\n{\n  @Input() divisions?: number;\n\n  abstract curveType: AnyConstructor<TCurve>;\n\n  private _extraArgs: unknown[] = [];\n\n  protected set extraArgs(v: unknown[]) {\n    this._extraArgs = v;\n    this.ngZone.runOutsideAngular(() => {\n      this.init();\n    });\n  }\n\n  constructor(\n    private readonly ngZone: NgZone,\n    @Optional() private readonly geometryDirective?: ThreeBufferGeometry\n  ) {}\n\n  private _curve?: TCurve;\n\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      if (!this.curve) {\n        this.init();\n      }\n    });\n  }\n\n  private init() {\n    this._curve = new this.curveType(...this._extraArgs);\n    if (this.curve && this.geometryDirective) {\n      const points = this.curve.getPoints(this.divisions);\n      this.geometryDirective.bufferGeometry.setFromPoints(\n        points as unknown as Vector3[] | Vector2[]\n      );\n    }\n  }\n\n  get curve(): TCurve | undefined {\n    return this._curve;\n  }\n}\n"]}