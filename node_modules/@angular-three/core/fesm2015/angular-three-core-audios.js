import * as i1 from '@angular-three/core';
import { DestroyedService } from '@angular-three/core';
import * as i0 from '@angular/core';
import { EventEmitter, Directive, SkipSelf, Input, Output, NgModule, Optional } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { AudioListener, PositionalAudio } from 'three';

class AudioListenerDirective {
    constructor(canvasStore, destroyed, ngZone) {
        this.canvasStore = canvasStore;
        this.destroyed = destroyed;
        this.ngZone = ngZone;
        this.ready = new EventEmitter();
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this._listener = new AudioListener();
            if (this.filter) {
                this._listener.filter = this.filter;
            }
            if (this.timeDelta) {
                this._listener.timeDelta = this.timeDelta;
            }
            this.canvasStore.active$
                .pipe(takeUntil(this.destroyed))
                .subscribe((active) => {
                this.ngZone.runOutsideAngular(() => {
                    const { camera } = this.canvasStore.getImperativeState();
                    if (active && camera) {
                        camera.add(this.audioListener);
                        this.ready.emit(this.audioListener);
                    }
                });
            });
        });
    }
    get audioListener() {
        return this._listener;
    }
}
AudioListenerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: AudioListenerDirective, deps: [{ token: i1.CanvasStore, skipSelf: true }, { token: i1.DestroyedService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
AudioListenerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: AudioListenerDirective, selector: "ngt-audio-listener", inputs: { filter: "filter", timeDelta: "timeDelta" }, outputs: { ready: "ready" }, providers: [DestroyedService], exportAs: ["ngtAudioListener"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: AudioListenerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-audio-listener',
                    exportAs: 'ngtAudioListener',
                    providers: [DestroyedService],
                }]
        }], ctorParameters: function () { return [{ type: i1.CanvasStore, decorators: [{
                    type: SkipSelf
                }] }, { type: i1.DestroyedService }, { type: i0.NgZone }]; }, propDecorators: { filter: [{
                type: Input
            }], timeDelta: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });

class ThreeAudioListenerModule {
}
ThreeAudioListenerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudioListenerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThreeAudioListenerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudioListenerModule, declarations: [AudioListenerDirective], exports: [AudioListenerDirective] });
ThreeAudioListenerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudioListenerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudioListenerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AudioListenerDirective],
                    exports: [AudioListenerDirective],
                }]
        }] });

class ThreeAudio {
    constructor(listenerDirective, parentObjectDirective) {
        this.listenerDirective = listenerDirective;
        this.parentObjectDirective = parentObjectDirective;
        this.ready = new EventEmitter();
    }
    ngOnInit() {
        if (!this.listenerDirective) {
            console.error('AudioListener must exist to initialize Audio');
            return;
        }
        this._audio = new this.audioType(this.listenerDirective.audioListener);
        if (this.audio) {
            if (this.object3d) {
                this.object3d.add(this.audio);
            }
            else if (this.parentObjectDirective) {
                this.parentObjectDirective.object3d.add(this.audio);
            }
        }
        this.ready.emit(this.audio);
    }
    get audio() {
        return this._audio;
    }
}
ThreeAudio.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudio, deps: [{ token: AudioListenerDirective, optional: true, skipSelf: true }, { token: i1.ThreeObject3d, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
ThreeAudio.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: ThreeAudio, inputs: { object3d: "object3d" }, outputs: { ready: "ready" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeAudio, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: AudioListenerDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.ThreeObject3d, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { object3d: [{
                type: Input
            }], ready: [{
                type: Output
            }] } });

class PositionalAudioDirective extends ThreeAudio {
    constructor() {
        super(...arguments);
        this.audioType = PositionalAudio;
    }
}
PositionalAudioDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: PositionalAudioDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PositionalAudioDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: PositionalAudioDirective, selector: "ngt-positional-audio", exportAs: ["ngtPositionalAudio"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: PositionalAudioDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-positional-audio',
                    exportAs: 'ngtPositionalAudio',
                }]
        }] });

class ThreePositionalAudioModule {
}
ThreePositionalAudioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreePositionalAudioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThreePositionalAudioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreePositionalAudioModule, declarations: [PositionalAudioDirective], exports: [PositionalAudioDirective] });
ThreePositionalAudioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreePositionalAudioModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreePositionalAudioModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PositionalAudioDirective],
                    exports: [PositionalAudioDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AudioListenerDirective, PositionalAudioDirective, ThreeAudio, ThreeAudioListenerModule, ThreePositionalAudioModule };
//# sourceMappingURL=angular-three-core-audios.js.map
