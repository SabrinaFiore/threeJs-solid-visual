import * as i1 from '@angular-three/core';
import { ThreeMesh, ThreeObject3d, OBJECT_3D_CONTROLLER_PROVIDER } from '@angular-three/core';
import * as i0 from '@angular/core';
import { Directive, NgModule, Input, EventEmitter, Optional, SkipSelf, Output, ContentChildren } from '@angular/core';
import { Mesh, InstancedMesh, DynamicDrawUsage, SkinnedMesh, Bone, Matrix4, Skeleton } from 'three';

class MeshDirective extends ThreeMesh {
    constructor() {
        super(...arguments);
        this.meshType = Mesh;
    }
}
MeshDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: MeshDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MeshDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: MeshDirective, selector: "ngt-mesh", providers: [
        { provide: ThreeObject3d, useExisting: MeshDirective },
        OBJECT_3D_CONTROLLER_PROVIDER,
    ], exportAs: ["ngtMesh"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: MeshDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-mesh',
                    exportAs: 'ngtMesh',
                    providers: [
                        { provide: ThreeObject3d, useExisting: MeshDirective },
                        OBJECT_3D_CONTROLLER_PROVIDER,
                    ],
                }]
        }] });

class ThreeMeshModule {
}
ThreeMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThreeMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeMeshModule, declarations: [MeshDirective], exports: [MeshDirective] });
ThreeMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeMeshModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MeshDirective],
                    exports: [MeshDirective],
                }]
        }] });

class InstancedMeshDirective extends ThreeMesh {
    constructor() {
        super(...arguments);
        this.meshType = InstancedMesh;
        this.customize = () => {
            this.object3d.instanceMatrix.setUsage(DynamicDrawUsage);
        };
    }
    set args(v) {
        this.extraArgs = v;
    }
    ngOnChanges() {
        this.init();
        super.ngOnChanges();
    }
    canCreate() {
        return !this.object3d && this.geometry;
    }
}
InstancedMeshDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: InstancedMeshDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
InstancedMeshDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: InstancedMeshDirective, selector: "ngt-instanced-mesh", inputs: { args: "args" }, providers: [
        {
            provide: ThreeObject3d,
            useExisting: InstancedMeshDirective,
        },
        OBJECT_3D_CONTROLLER_PROVIDER,
    ], exportAs: ["ngtInstancedMesh"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: InstancedMeshDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-instanced-mesh',
                    exportAs: 'ngtInstancedMesh',
                    providers: [
                        {
                            provide: ThreeObject3d,
                            useExisting: InstancedMeshDirective,
                        },
                        OBJECT_3D_CONTROLLER_PROVIDER,
                    ],
                }]
        }], propDecorators: { args: [{
                type: Input
            }] } });

class ThreeInstancedMeshModule {
}
ThreeInstancedMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeInstancedMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThreeInstancedMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeInstancedMeshModule, declarations: [InstancedMeshDirective], exports: [InstancedMeshDirective] });
ThreeInstancedMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeInstancedMeshModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeInstancedMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [InstancedMeshDirective],
                    exports: [InstancedMeshDirective],
                }]
        }] });

class SkinnedMeshDirective extends ThreeMesh {
    constructor() {
        super(...arguments);
        this.meshType = SkinnedMesh;
    }
    set args(v) {
        this.extraArgs = v;
    }
}
SkinnedMeshDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: SkinnedMeshDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
SkinnedMeshDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: SkinnedMeshDirective, selector: "ngt-skinned-mesh", inputs: { args: "args", bindMatrix: "bindMatrix", bindMode: "bindMode" }, providers: [
        { provide: ThreeObject3d, useExisting: SkinnedMeshDirective },
        OBJECT_3D_CONTROLLER_PROVIDER,
    ], exportAs: ["ngtSkinnedMesh"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: SkinnedMeshDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-skinned-mesh',
                    exportAs: 'ngtSkinnedMesh',
                    providers: [
                        { provide: ThreeObject3d, useExisting: SkinnedMeshDirective },
                        OBJECT_3D_CONTROLLER_PROVIDER,
                    ],
                }]
        }], propDecorators: { args: [{
                type: Input
            }], bindMatrix: [{
                type: Input
            }], bindMode: [{
                type: Input
            }] } });

class BoneDirective extends ThreeObject3d {
    ngOnInit() {
        this.init();
    }
    initObject() {
        this._bone = new Bone();
    }
    get object3d() {
        return this._bone;
    }
}
BoneDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: BoneDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
BoneDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: BoneDirective, selector: "ngt-bone", providers: [
        { provide: ThreeObject3d, useExisting: BoneDirective },
        OBJECT_3D_CONTROLLER_PROVIDER,
    ], exportAs: ["ngtBone"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: BoneDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-bone',
                    exportAs: 'ngtBone',
                    providers: [
                        { provide: ThreeObject3d, useExisting: BoneDirective },
                        OBJECT_3D_CONTROLLER_PROVIDER,
                    ],
                }]
        }] });

class SkeletonDirective {
    constructor(ngZone, hostObject) {
        this.ngZone = ngZone;
        this.hostObject = hostObject;
        this.ready = new EventEmitter();
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.bones) {
                const boneInverses = this.boneInverses
                    ? this.boneInverses.map((threeMaxtrix) => {
                        if (threeMaxtrix instanceof Matrix4)
                            return threeMaxtrix;
                        return new Matrix4().set(...threeMaxtrix);
                    })
                    : undefined;
                this._skeleton = new Skeleton(this.bones.map((b) => b.object3d), boneInverses);
                this.ready.emit(this.skeleton);
                if (this.hostObject) {
                    if (this.hostObject instanceof SkinnedMeshDirective) {
                        const bindMatrix = this.hostObject.bindMatrix
                            ? this.hostObject.bindMatrix instanceof Matrix4
                                ? this.hostObject.bindMatrix
                                : new Matrix4().set(...this.hostObject.bindMatrix)
                            : undefined;
                        this.hostObject.object3d.bind(this._skeleton, bindMatrix);
                    }
                }
            }
        });
    }
    get skeleton() {
        return this._skeleton;
    }
}
SkeletonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: SkeletonDirective, deps: [{ token: i0.NgZone }, { token: i1.ThreeObject3d, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
SkeletonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.10", type: SkeletonDirective, selector: "ngt-skeleton", inputs: { boneInverses: "boneInverses" }, outputs: { ready: "ready" }, queries: [{ propertyName: "bones", predicate: BoneDirective }], exportAs: ["ngtSkeleton"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: SkeletonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngt-skeleton',
                    exportAs: 'ngtSkeleton',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.ThreeObject3d, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { boneInverses: [{
                type: Input
            }], ready: [{
                type: Output
            }], bones: [{
                type: ContentChildren,
                args: [BoneDirective]
            }] } });

class ThreeSkinnedMeshModule {
}
ThreeSkinnedMeshModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeSkinnedMeshModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThreeSkinnedMeshModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeSkinnedMeshModule, declarations: [SkinnedMeshDirective, BoneDirective, SkeletonDirective], exports: [SkinnedMeshDirective, BoneDirective, SkeletonDirective] });
ThreeSkinnedMeshModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeSkinnedMeshModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.10", ngImport: i0, type: ThreeSkinnedMeshModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [SkinnedMeshDirective, BoneDirective, SkeletonDirective],
                    exports: [SkinnedMeshDirective, BoneDirective, SkeletonDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BoneDirective, InstancedMeshDirective, MeshDirective, SkeletonDirective, SkinnedMeshDirective, ThreeInstancedMeshModule, ThreeMeshModule, ThreeSkinnedMeshModule };
//# sourceMappingURL=angular-three-core-meshes.js.map
