import { AnyConstructor, ThreeObject3d } from '@angular-three/core';
import { EventEmitter, OnInit } from '@angular/core';
import type { Object3D } from 'three';
import { Audio } from 'three';
import { AudioListenerDirective } from '../audio-listener';
import * as i0 from "@angular/core";
export declare abstract class ThreeAudio<TAudioNode extends AudioNode = GainNode, TAudio extends Audio<TAudioNode> = Audio<TAudioNode>> implements OnInit {
    private readonly listenerDirective?;
    protected readonly parentObjectDirective?: ThreeObject3d<Object3D<import("three").Event>> | undefined;
    object3d?: Object3D;
    ready: EventEmitter<TAudio>;
    constructor(listenerDirective?: AudioListenerDirective | undefined, parentObjectDirective?: ThreeObject3d<Object3D<import("three").Event>> | undefined);
    abstract audioType: AnyConstructor<TAudio>;
    private _audio?;
    ngOnInit(): void;
    get audio(): TAudio | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<ThreeAudio<any, any>, [{ optional: true; skipSelf: true; }, { optional: true; skipSelf: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ThreeAudio<any, any>, never, never, { "object3d": "object3d"; }, { "ready": "ready"; }, never>;
}
